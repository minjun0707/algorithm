class Solution {
    
    boolean visit[];
    String sBegin;
    String sTarget;
    String[] sWords;
    int answer = Integer.MAX_VALUE;
    public int solution(String begin, String target, String[] words) {
        sBegin = begin;
        sTarget = target;
        sWords = words;
        visit = new boolean[words.length];
        
        
        //dfs 호출
        dfs(begin,0);
        
        if(answer == Integer.MAX_VALUE) {
            answer = 0;
        }
        
        return answer;
    }
    
    //idx : 비교할 단어의 위치, count : 비교횟수 , str : 현재 str
    public void dfs(String nowStr, int count) {
       
        
        //탈출
        if(nowStr.equals(sTarget)) {
            answer = Math.min(answer, count);
            return;
        }
       
        for(int i =0; i< sWords.length; i++) {
            
            if(visit[i]) {
                continue;
            }
            
            int flag = 0;
            for(int j=0; j < sTarget.length(); j++) {
                if(nowStr.charAt(j) != sWords[i].charAt(j)) {
                    flag++;
                }
            }
            
            //하나만 다른 경우
            if(flag == 1) {
                visit[i] = true;
                dfs(sWords[i],count+1);
                visit[i] = false;
            }
            
        }
        
        
        
    }
}