import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.sql.Array;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Scanner;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.function.Predicate;

public class Main {

	int N;
	int M;
	int K;

	int[] dirX = {0, 1, 1, 1, 0, -1, -1, -1};
	int[] dirY = {-1, -1, 0, 1, 1, 1, 0, -1};

	int mod;
	List<FireBall> fireBallList = new ArrayList<>();
	List<FireBall> map[][];

	public static void main(String[] args) throws IOException {
		new Main().solution();
	}

	public void solution() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());

		// 행열
		N = Integer.parseInt(st.nextToken());

		//M개의 파이어볼
		M = Integer.parseInt(st.nextToken());

		//K 이동횟수
		K = Integer.parseInt(st.nextToken());

		map = new ArrayList[N][N];

		//map에 cell 초기화
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				map[i][j] = new ArrayList<>();
			}
		}

		//초기 파이어볼 세팅
		for (int i = 0; i < M; i++) {
			st = new StringTokenizer(br.readLine());
			int r = Integer.parseInt(st.nextToken()) - 1;
			int c = Integer.parseInt(st.nextToken()) - 1;
			int m = Integer.parseInt(st.nextToken());
			int s = Integer.parseInt(st.nextToken());
			int d = Integer.parseInt(st.nextToken());

			FireBall fireBall = new FireBall(r, c, m, s, d);
			fireBallList.add(fireBall);
		}

		//K만큼 이동
		for (int i = 0; i < K; i++) {

			for (int j = 0; j < fireBallList.size(); j++) {
				fireBallList.get(j).move();
			}

			for (int j = 0; j < N; j++) {
				for (int k = 0; k < N; k++) {
					int size = map[j][k].size();

					if (size < 2) {
						map[j][k].clear();
						continue;
					}

					int m = 0;
					int s = 0;

					boolean isOdd = false;
					boolean isOven = false;

					for (int l = 0; l < size; l++) {
						m = m + map[j][k].get(l).m;
						s = s + map[j][k].get(l).s;

						if (map[j][k].get(l).d % 2 == 0) {
							isOdd = true;
						} else {
							isOven = true;
						}
						fireBallList.remove(map[j][k].get(l));
					}

					map[j][k].clear();
					m = m / 5;
					s = s / size;

					if (m == 0) {
						continue;
					}

					if (isOdd && isOven) {

						for (int l = 1; l <= 7; l = l + 2) {
							FireBall fireBall = new FireBall(j, k, m, s, l);
							fireBallList.add(fireBall);
						}

					} else {


						for (int l = 0; l <= 6; l = l + 2) {
							FireBall fireBall = new FireBall(j, k, m, s, l);
							fireBallList.add(fireBall);
						}


					}

				}
			}

		}

		int count = 0;
		for (int i = 0; i < fireBallList.size(); i++) {
			count = count + fireBallList.get(i).m;
		}

		System.out.println(count);

	}

	class FireBall {
		int r;
		int c;
		int m;
		int s;
		int d;

		public FireBall(int r, int c, int m, int s, int d) {
			this.r = r;
			this.c = c;
			this.m = m;
			this.s = s;
			this.d = d;
		}

		public void move() {

			int nextR = (r + N + dirY[d] * (s % N)) % N;
			int nextC = (c + N + dirX[d] * (s % N)) % N;

			this.r = nextR;
			this.c = nextC;

			map[this.r][this.c].add(this);

		}
	}

}


