import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.sql.Array;
import java.sql.Struct;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Scanner;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.function.Predicate;

public class Main {

	int N;
	int L;
	int[][] map;
	boolean[][] visit;

	public static void main(String[] args) throws IOException {
		new Main().solution();
	}

	public void solution() throws IOException {

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());

		N = Integer.parseInt(st.nextToken());
		L = Integer.parseInt(st.nextToken());

		map = new int[N][N];
		visit = new boolean[N][N];

		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 0; j < N; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
			}
		}


		int count = 0;
		for (int i = 0; i < N; i++) {
			int ground = 1;
			boolean isCanGo = false;
			visit = new boolean[N][N];
			for (int j = 0; j < N-1; j++){
				isCanGo = false;

				//다음 칸이랑 높이가 똑같아?
				if(map[i][j] == map[i][j+1]) {
					isCanGo = true;
					ground++;
					continue;
				}

				//오르막길이야?
				if(map[i][j] == map[i][j+1] - 1) {

					//세울 땅이 있어?
					if(ground >= L) {

						//또다른 경사로가 있어?
						if(visit[i][j-L+1] == false) {
							for (int k = 0; k < L; k++) {
								visit[i][j-k] = true;
								ground =1;
								isCanGo = true;
							}
						}
					}
				}

				//내리막길이야?
				else if (map[i][j] == map[i][j+1] + 1) {

					//남아있는 땅 계산
					int groundDown = 1;

					int k=2;
					while(j+k <= N - 1) {
						if(map[i][j+1] == map[i][j+k]) {
							groundDown++;
						}
						else {
							break;
						}
						k++;
					}

					if(groundDown >= L) {
						//경사로를 놓는다
						for (int l = 1; l <= L; l++) {
							visit[i][j+l] = true;
							ground = 1;
							isCanGo = true;
						}

					}

				} else {
					isCanGo = false;
				}


				if(isCanGo == false) {
					break;
				}
 			}

			if(isCanGo) {
				count++;
			}


			///
			ground = 1;
			isCanGo = false;
			visit = new boolean[N][N];
			for (int j = 0; j < N-1; j++){
				isCanGo = false;

				//다음 칸이랑 높이가 똑같아?
				if(map[j][i] == map[j+1][i]) {
					isCanGo = true;
					ground++;
					continue;
				}

				//오르막길이야?
				if(map[j][i] == map[j+1][i] - 1) {

					//세울 땅이 있어?
					if(ground >= L) {

						//또다른 경사로가 있어?
						if(visit[j-L+1][i] == false) {
							for (int k = 0; k < L; k++) {
								visit[j-k][i] = true;
								ground =1;
								isCanGo = true;
							}
						}
					}
				}

				//내리막길이야?
				else if (map[j][i] == map[j+1][i] + 1) {

					//남아있는 땅 계산
					int groundDown = 1;

					int k=2;
					while(j+k <= N - 1) {
						if(map[j+1][i] == map[j+k][i]) {
							groundDown++;
						}
						else {
							break;
						}
						k++;
					}

					if(groundDown >= L) {
						//경사로를 놓는다
						for (int l = 1; l <= L; l++) {
							visit[j+l][i] = true;
							ground = 1;
							isCanGo = true;
						}

					}

				} else {
					isCanGo = false;
				}


				if(isCanGo == false) {
					break;
				}
			}

			if(isCanGo) {
				count++;
			}



		}

		System.out.println(count);

	}

}


