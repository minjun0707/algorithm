import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Scanner;
import java.util.Set;
import java.util.StringTokenizer;

public class Main {

	int N;
	int x;
	int y;
	int d;
	int g;

	int lastY;
	int lastX;
	int[] dirX = {1, 0, -1, 0};
	int[] dirY = {0, -1, 0, 1};
	boolean[][] map;

	public static void main(String[] args) throws IOException {
		new Main().solution();
	}

	public void solution() throws IOException {
		Scanner sc = new Scanner(System.in);
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		N = sc.nextInt();
		map = new boolean[103][103];

		for (int i = 0; i < N; i++) {
			List<Integer> d_list = new ArrayList<>();

			x = sc.nextInt();
			y = sc.nextInt();
			d = sc.nextInt();
			g = sc.nextInt();

			//0세대
			map[y][x] = true;
			map[y+dirY[d]][x+dirX[d]] = true;
			d_list.add(d);
			lastY = y+dirY[d];
			lastX = x+dirX[d];

			//세대 만큼 반복
			for (int j = 1; j <= g; j++) {

				//리스트만큼 반복
				for (int k = d_list.size() - 1; k >= 0; k--) {

					//반시계로 돌려
					int dir = (d_list.get(k) + 1) % 4;
					d_list.add(dir);
					// k는 인덱스
					map[lastY + dirY[dir]][lastX + dirX[dir]] = true;

					lastY = lastY + dirY[dir];
					lastX = lastX + dirX[dir];
				}
			}

		}

		int count = 0;
		for (int i = 0; i <=100; i++) {
			for (int j = 0; j <= 100; j++) {
				if(map[i][j] == true) {
					if(map[i][j+1] && map[i+1][j+1] && map[i+1][j]){
						count ++;
					}
				}
			}
		}

		System.out.println(count);

	}

}





