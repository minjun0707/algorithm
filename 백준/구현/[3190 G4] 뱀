import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

import java.sql.Array;
import java.util.*;

import org.w3c.dom.Node;

class Main {

	static int RIGHT = 0;
	static int BOTTOM = 1;
	static int LEFT = 2;
	static int TOP = 3;

	static int dirR[] = {0,1,0,-1};
	static int dirC[] = {1,0,-1,0};

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		//보드의 크기
		int N = Integer.parseInt(br.readLine());

		//사과의 개수
		int K = Integer.parseInt(br.readLine());

		//맵 생성
		int[][] map = new int[N][N];
		boolean[][] visit = new boolean[N][N];
		for (int i = 0; i < K; i++) {
			StringTokenizer st = new StringTokenizer(br.readLine());
			int r = Integer.parseInt(st.nextToken()) - 1;
			int c = Integer.parseInt(st.nextToken()) - 1;
			map[r][c] = 1;
		}

		// 변환 정보
		int L = Integer.parseInt(br.readLine());
		Map<Integer, String> directionMap = new HashMap<>();
		for (int i = 0; i < L; i++) {
			StringTokenizer st = new StringTokenizer(br.readLine());
			int time = Integer.parseInt(st.nextToken());
			String dir = st.nextToken();
			directionMap.put(time, dir);
		}

		int time = 0;

		Deque<Node> que = new ArrayDeque<>();
		que.addLast(new Node(0, 0, RIGHT));
		visit[0][0] = true;

		while (true) {
			time++;

			Node head = que.getLast();

			int r = head.r + dirR[head.dir];
			int c = head.c + dirC[head.dir];

			//벽이나 자기 자신의 몸과 부딪 히면 끝난다
			if((r >= 0 && r < N && c >= 0 && c < N) == false || visit[r][c]) {
				System.out.println(time);
				return;
			}

			//다음칸에 위치 시킨다.
			que.addLast(new Node(r,c, head.dir));
			visit[r][c] = true;

			//사과가 있다먄
			if(map[que.getLast().r][que.getLast().c] == 1) {
				map[que.getLast().r][que.getLast().c] = 0;
			} else {
				Node delete = que.pollFirst();
				visit[delete.r][delete.c] = false;
			}

			//만약 방문한데를 방문하면 종료
			if(directionMap.get(time) != null) {
				String dir = directionMap.get(time);
				if(dir.equals("D")) {
					que.getLast().rotateClock();
				} else {
					que.getLast().rotateCountClock();
				}
			}
		}

	}

	static class Node {
		int r;
		int c;
		int dir;

		Node(int r, int c, int dir) {
			this.r = r;
			this.c = c;
			this.dir = dir;
		}

		public void rotateClock() {
			this.dir = (this.dir + 1) % 4;
		}

		public void rotateCountClock() {
			if (this.dir == 0) {
				this.dir = 3;
			} else {
				this.dir = (this.dir - 1) % 4;
			}
		}
	}

}




