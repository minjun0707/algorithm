
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.sql.Array;
import java.sql.Struct;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Scanner;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.function.Predicate;

public class Main {

	int N;
	int M;
	int H;

	int map[][];
	boolean mapVisit[][];
	int answer = Integer.MAX_VALUE;

	public static void main(String[] args) throws IOException {
		new Main().solution();
	}

	public void solution() throws IOException {

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());

		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		H = Integer.parseInt(st.nextToken());

		map = new int[H + 1][N + 1];
		mapVisit = new boolean[H + 1][N + 1];

		for (int i = 0; i < M; i++) {
			st = new StringTokenizer(br.readLine());
			int a = Integer.parseInt(st.nextToken());
			int b = Integer.parseInt(st.nextToken());

			map[a][b] = 2;
			map[a][b + 1] = 1;
		}

		dfs(1, 1, 0, 0);
		dfs(1, 1, 1, 0);
		dfs(1, 1, 2, 0);
		dfs(1, 1, 3, 0);

		if (answer == Integer.MAX_VALUE) {
			System.out.println(-1);
		} else {
			System.out.println(answer);
		}

	}

	public void dfs(int r, int c, int maxDepth, int nowDepth) {

		//탈출 조건
		if (maxDepth == nowDepth) {

			boolean isTrue = true;
			//
			// for (int i = 1; i <= H; i++) {
			// 	System.out.println();
			// 	for (int j = 1; j <= N; j++) {
			// 		System.out.print(" " + map[i][j]);
			// 	}
			// }
			// System.out.println();

			for (int i = 1; i <= N; i++) {
				int nowR = 1;
				int nowC = i;

				for (int j = 1; j <= H; j++) {
					if (map[nowR][nowC] == 2) {
						//오른쪽으로이동
						nowR = nowR + 1;
						nowC = nowC + 1;
					} else if (map[nowR][nowC] == 0) {
						nowR = nowR + 1;
					} else if (map[nowR][nowC] == 1) {
						nowR = nowR + 1;
						nowC = nowC - 1;
					}
				}

				if (nowC != i) {
					return;
				}

			}

			if (isTrue) {
				answer = Math.min(answer, maxDepth);
			}

			return;
		}

		//반복 조건
		for (int i = r; i <= H; i++) {
			for (int j = c; j <= N - 1; j++) {
				//자신의 왼쪽에 2가 없으면 사다리를 세운다
				if (map[i][j] == 0 && map[i][j + 1] != 2) {
					map[i][j] = 2;
					map[i][j + 1] = 1;

					dfs(i, j + 1, maxDepth, nowDepth + 1);

					map[i][j] = 0;
					map[i][j + 1] = 0;
				}
			}
			c = 1;
		}
	}

}


