import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.StringTokenizer;

public class Main {

	int N;
	int map[][];
	int favoriteStudentMap[][];
	int maxFavoriteCount = 0;
	int maxTempCount = 0;

	int[] dirX = {1, -1, 0, 0};
	int[] dirY = {0, 0, 1, -1};
	List<Student> studentList = new ArrayList<>();
	List<Cell> step1 = new ArrayList<>();
	List<Cell> step2 = new ArrayList<Cell>();
	int[] stdArr;

	int sum = 0;

	public static void main(String[] args) throws IOException {
		new Main().solution();
	}

	public void solution() throws IOException {

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		N = Integer.parseInt(br.readLine());
		map = new int[N][N];
		favoriteStudentMap = new int[N][N];
		stdArr = new int[N * N + 1];

		//입력받아 리스트에 넣기
		for (int i = 0; i < N * N; i++) {
			StringTokenizer st = new StringTokenizer(br.readLine());
			int studentNum = Integer.parseInt(st.nextToken());
			stdArr[studentNum] = i;
			List<Integer> favoriteStudent = new ArrayList<>();

			favoriteStudent.add(Integer.parseInt(st.nextToken()));
			favoriteStudent.add(Integer.parseInt(st.nextToken()));
			favoriteStudent.add(Integer.parseInt(st.nextToken()));
			favoriteStudent.add(Integer.parseInt(st.nextToken()));

			studentList.add(new Student(studentNum, favoriteStudent));
		}

		//student 수만큼 반복
		for (int i = 0; i < studentList.size(); i++) {

			step1.clear();
			step2.clear();
			maxFavoriteCount = 0;
			maxTempCount = 0;
			favoriteStudentMap = new int[N][N];
			for (int j = 0; j < N; j++) {
				for (int k = 0; k < N; k++) {
					favoriteStudentMap[j][k] = -1;
				}
			}

			step1(i);
			if (step1.size() == 1) {
				map[step1.get(0).r][step1.get(0).c] = studentList.get(i).studentNum;
				continue;
			}

			step2();
			if (step2.size() == 1) {
				map[step2.get(0).r][step2.get(0).c] = studentList.get(i).studentNum;
				continue;
			}

			step3();
			map[step2.get(0).r][step2.get(0).c] = studentList.get(i).studentNum;
		}

		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {

				int count = 0;
				for (int k = 0; k < 4; k++) {
					int nextX = j + dirX[k];
					int nextY = i + dirY[k];

					if (rangeCheck(nextX, nextY) == false) {
						continue;
					}

					if (studentList.get(stdArr[map[i][j]]).favoriteStudent.contains(map[nextY][nextX])) {
						count++;
					}
				}

				int add = 0;
				if (count == 0) {
					add = 0;
				}
				if (count == 1) {
					add = 1;
				}
				if (count == 2) {
					add = 10;
				}
				if (count == 3) {
					add = 100;
				}
				if (count == 4) {
					add = 1000;
				}
				sum = sum + add;
			}
		}

		System.out.println(sum);
	}

	public void step3() {
		Collections.sort(step2, (s1, s2) -> {
			if (s1.r > s2.r) {
				return 1;
			} else if (s1.r == s2.r) {
				if (s1.c > s2.c) {
					return 1;
				} else
					return -1;
			} else {
				return -1;
			}

		});

	}

	public void step2() {
		//step1을 만족하는
		for (int i = 0; i < step1.size(); i++) {

			int tempCount = 0;
			//4방향탐색
			for (int j = 0; j < 4; j++) {
				int nextX = step1.get(i).c + dirX[j];
				int nextY = step1.get(i).r + dirY[j];

				if (rangeCheck(nextX, nextY) == false) {
					continue;
				}

				if (map[nextY][nextX] == 0) {
					tempCount++;
					step1.get(i).tempCount++;
				}
			}

			maxTempCount = Math.max(tempCount, maxTempCount);
		}

		for (int i = 0; i < step1.size(); i++) {
			if (step1.get(i).tempCount == maxTempCount) {
				step2.add(step1.get(i));
			}
		}

	}

	public void step1(int idx) {
		//map을 전체 탐색
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {

				if (map[i][j] != 0) {
					continue;
				}
				int favoriteCount = 0;
				//4방향탐색
				for (int k = 0; k < 4; k++) {
					int nextX = j + dirX[k];
					int nextY = i + dirY[k];

					if (rangeCheck(nextX, nextY) == false) {
						continue;
					}

					//좋아하는 사람 4명 탐색
					if (studentList.get(idx).favoriteStudent.contains(map[nextY][nextX])) {
						favoriteCount++;
					}
				}

				favoriteStudentMap[i][j] = favoriteCount;
				maxFavoriteCount = Math.max(maxFavoriteCount, favoriteCount);
			}
		}

		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				if (favoriteStudentMap[i][j] == maxFavoriteCount) {
					step1.add(new Cell(i, j));
				}
			}
		}

	}

	public boolean rangeCheck(int x, int y) {
		return (x >= 0 && x < N && y >= 0 && y < N);
	}

	class Cell {
		int r;
		int c;

		int tempCount;

		Cell(int r, int c) {
			this.r = r;
			this.c = c;
		}

	}

	class Student {
		int studentNum;
		List<Integer> favoriteStudent;

		Student(int studentNum, List<Integer> favoriteStudent) {
			this.studentNum = studentNum;
			this.favoriteStudent = favoriteStudent;
		}

	}

}








