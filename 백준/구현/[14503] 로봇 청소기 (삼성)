import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringTokenizer;
import java.util.function.Predicate;

public class Main {

	int N;
	int M;
	int[][] map;

	int[] dirX = {0, 1, 0, -1};
	int[] dirY = {-1, 0, 1, 0};

	int r;
	int c;

	int d;

	int cleanCount = 0;

	public static void main(String[] args) throws IOException {
		new Main().solution();
	}

	public void solution() throws IOException {

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		// 3  3
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());

		// 1 1 0 로봇청소기 위치
		st = new StringTokenizer(br.readLine());
		r = Integer.parseInt(st.nextToken());
		c = Integer.parseInt(st.nextToken());
		d = Integer.parseInt(st.nextToken());

		map = new int[N][M];

		// map 위치 받기
		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 0; j < M; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
			}
		}



		boolean isCleaning = true;
		while (isCleaning) {
			//1. 현재 칸 청소
			clean();

			//2 청소가 다 된 경우
			if (isAllClean()) {
				//한칸 후진이 가능한 경우
				if (map[r - dirY[d]][c - dirX[d]] != 1) {
					//후진
					r = r - dirY[d];
					c = c - dirX[d];
				} else if (map[r - dirY[d]][c - dirX[d]] == 1) {
					isCleaning = false;
				}
			}

			//3 청소되지 않는 빈 칸이 있는 경우
			else {
				//반시계
				d = (d - 1 + 4) % 4;

				//전진
				if(map[r + dirY[d]][c + dirX[d]] == 0) {
					r = r + dirY[d];
					c = c + dirX[d];
				}
			}

			// for (int i = 0; i < N; i++) {
			// 	System.out.println();
			// 	for (int j = 0; j < M; j++) {
			// 		System.out.print(" " + map[i][j]);
			// 	}
			// }
			// System.out.println();

		}
		System.out.println(cleanCount);

	}

	public void clean() {
		//청소가 안됐고 벽이 아니면
		if (map[r][c] == 0) {
			map[r][c] = 5;
			cleanCount++;
		}


	}

	public boolean isAllClean() {
		for (int i = 0; i < 4; i++) {
			//다 청ㄱ
			if (map[r + dirY[i]][c + dirX[i]] != 1) {
				if (map[r + dirY[i]][c + dirX[i]] == 0) {
					return false;
				}
			}
		}

		return true;
	}

}





