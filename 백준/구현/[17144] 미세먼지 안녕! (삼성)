import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.sql.Array;
import java.sql.Struct;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Scanner;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.function.Predicate;

public class Main {

	int R;
	int C;
	int T;

	int map[][];
	int tempSumMap[][];

	Robot robot;

	int[] dirY = {0, 0, 1, -1};
	int[] dirX = {1, -1, 0, 0};

	public static void main(String[] args) throws IOException {
		new Main().solution();
	}

	public void solution() throws IOException {

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());

		//R개의 해
		R = Integer.parseInt(st.nextToken());

		// 열
		C = Integer.parseInt(st.nextToken());

		//T초가 지난 후
		T = Integer.parseInt(st.nextToken());

		map = new int[R + 1][C + 1];
		tempSumMap = new int[R + 1][C + 1];

		int temp = 0;
		for (int i = 1; i <= R; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 1; j <= C; j++) {
				int value = Integer.parseInt(st.nextToken());
				map[i][j] = value;

				//로봇 위치 받기 (한번만 받기)
				if (value == -1 && temp == 0) {
					robot = new Robot(i, j);
					temp++;
				}
			}
		}

		for (int l = 0; l < T; l++) {
			tempSumMap = new int[R+1][C+1];
			//미세먼지 확산
			for (int i = 1; i <= R; i++) {
				for (int j = 1; j <= C; j++) {
					int dirCount = diffusion(i, j);
					//칸에 남은 미세먼지 양은
					map[i][j] = map[i][j] - (map[i][j] / 5) * dirCount;
				}
			}

			//tempSum 합치기
			for (int i = 1; i <= R; i++) {
				for (int j = 1; j <= C; j++) {
					map[i][j] = map[i][j] + tempSumMap[i][j];
				}
			}

			//공기청정기 작동

			//아래 방향 부터
			for (int i = robot.bottomR + 1; i < R; i++) {
				map[i][1] = map[i + 1][1];
			}

			for (int i = 1; i < C; i++) {
				map[R][i] = map[R][i + 1];
			}

			for (int i = R; i > robot.bottomR; i--) {
				map[i][C] = map[i - 1][C];
			}

			for (int i = C; i >= 3; i--) {
				map[robot.bottomR][i] = map[robot.bottomR][i - 1];
			}

			map[robot.bottomR][2] = 0;

			for (int i = robot.topR - 1; i > 1; i--) {
				map[i][1] = map[i - 1][1];
			}

			for (int i = 1; i < C; i++) {
				map[1][i] = map[1][i + 1];
			}

			for (int i = 1; i < robot.topR; i++) {
				map[i][C] = map[i + 1][C];

			}

			for (int i = C; i > 2; i--) {
				map[robot.topR][i] = map[robot.topR][i - 1];
			}

			map[robot.topR][2] = 0;

		}

		// for (int i = 1; i <= R; i++) {
		// 	System.out.println();
		// 	for (int j = 1; j <= C; j++) {
		// 		System.out.print(" " + map[i][j]);
		// 	}
		// }

		int sum = 0;
		for (int i = 1; i <= R; i++) {
			for (int j = 1; j <= C; j++) {
				sum = sum + map[i][j];
			}
		}


		System.out.println(sum + 2);

	}

	public int diffusion(int r, int c) {

		int dirCount = 0;
		int diffusionValue = map[r][c] / 5;

		for (int i = 0; i < 4; i++) {
			if (rangeCheck(r + dirY[i], c + dirX[i]) && map[r + dirY[i]][c + dirX[i]] != -1) {
				tempSumMap[r + dirY[i]][c + dirX[i]] += diffusionValue;
				dirCount++;
			}
		}

		return dirCount;
	}

	public boolean rangeCheck(int y, int x) {
		return (y >= 1 && y <= R && x >= 1 && x <= C);
	}

	class Robot {
		int topR;
		int topC;
		int bottomR;
		int bottomC;

		public Robot(int topR, int topC) {
			this.topR = topR;
			this.topC = 1;
			this.bottomR = topR + 1;
			this.bottomC = 1;
		}
	}

}


