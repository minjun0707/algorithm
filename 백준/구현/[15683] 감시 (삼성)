import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Scanner;
import java.util.Set;
import java.util.StringTokenizer;

public class Main {

	int N;
	int M;
	int map[][];
	int visit[][];

	int tempCell = 0;
	List<CCTV> cctvList = new ArrayList<>();
	int answer = Integer.MIN_VALUE;

	public static void main(String[] args) throws IOException {
		new Main().solution();
	}

	public void solution() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());

		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());

		map = new int[N][M];
		visit = new int[N][M];

		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 0; j < M; j++) {
				int type = Integer.parseInt(st.nextToken());
				map[i][j] = type;
				visit[i][j] = type;
				//cctv라면
				if (type >= 1 && type <= 5) {
					cctvList.add(new CCTV(type, i, j));
				}

				if(type == 0) {
					tempCell++;
				}

			}
		}

		dfs(0,0);
		System.out.println(tempCell - answer);

		//22 - 2

	}

	public void dfs(int idx , int depth) {

		//탈출
		if(depth == cctvList.size()){
			sum();
			return;
		}

		//반복
		for (int i = 0; i < 4; i++) {
			dfs(idx+1,depth+1);
			cctvList.get(idx).rotate();
		}

	}

	public void sum() {

		visit = new int[N][M];

		for (int i = 0; i < cctvList.size(); i++) {

			//4방향 탐색
			for (int j = 0; j <4 ; j++) {
				//cctv 방향이 1이면
				if(cctvList.get(i).dir.get(j) == 1) {

					//동
					if(j == 0) {
						for (int k = cctvList.get(i).c+1; k < M ; k++) {
							//벽
							if(map[cctvList.get(i).r][k] == 6) {
								break;
							}
							//cctv
							if(map[cctvList.get(i).r][k]>=1 && map[cctvList.get(i).r][k]<=5) {
								continue;
							}
							visit[cctvList.get(i).r][k] = -1;
						}
					}

					//남
					if(j == 1) {
						for (int k = cctvList.get(i).r+1; k < N ; k++) {
							//벽
							if(map[k][cctvList.get(i).c] == 6) {
								break;
							}
							//cctv
							if(map[k][cctvList.get(i).c]>=1 && map[k][cctvList.get(i).c]<=5) {
								continue;
							}
							visit[k][cctvList.get(i).c] = -1;
						}

					}

					//서
					if(j == 2) {
						for (int k = cctvList.get(i).c-1; k >= 0 ; k--) {
							//벽
							if(map[cctvList.get(i).r][k] == 6) {
								break;
							}
							//cctv
							if(map[cctvList.get(i).r][k]>=1 && map[cctvList.get(i).r][k]<=5) {
								continue;
							}
							visit[cctvList.get(i).r][k] = -1;
						}


					}

					if(j == 3) {
						for (int k = cctvList.get(i).r-1; k >= 0 ; k--) {
							//벽
							if(map[k][cctvList.get(i).c] == 6) {
								break;
							}
							//cctv
							if(map[k][cctvList.get(i).c]>=1 && map[k][cctvList.get(i).c]<=5) {
								continue;
							}
							visit[k][cctvList.get(i).c] = -1;
						}

					}
					//해당 지점에서 방향으로 -1을 추가해나간다 만약 1이면 넘고
					//6이면 그만
				}

			}
		}

		int count = 0;
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				if(visit[i][j] == -1) {
					count++;
				}
			}
		}


		answer = Math.max(count,answer);
	}

}



class CCTV {
	int type;
	int r;
	int c;
	List<Integer> dir = new ArrayList<>();

	CCTV(int type, int r, int c) {
		this.type = type;
		this.r = r;
		this.c = c;

		if (type == 1) {
			dir.add(0);
			dir.add(1);
			dir.add(0);
			dir.add(0);
		}

		if (type == 2) {
			dir.add(1);
			dir.add(0);
			dir.add(1);
			dir.add(0);
		}

		if (type == 3) {
			dir.add(1);
			dir.add(1);
			dir.add(0);
			dir.add(0);
		}

		if (type == 4) {
			dir.add(1);
			dir.add(1);
			dir.add(1);
			dir.add(0);
		}

		if (type == 5) {
			dir.add(1);
			dir.add(1);
			dir.add(1);
			dir.add(1);
		}
	}

	public void rotate() {
		int removedDir = dir.remove(dir.size()-1);
		dir.add(0,removedDir);
	}

}




