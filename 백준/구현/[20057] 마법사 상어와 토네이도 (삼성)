import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;
import java.util.function.Predicate;

public class Main {

	int N;

	int[][] map;

	int[] dirX = {-1, 0, 1, 0};
	int[] dirY = {0, 1, 0, -1};

	int dir = 0;

	int discardSandSum = 0;

	int nowR;
	int nowC;

	public static void main(String[] args) throws IOException {
		new Main().solution();
	}

	public void solution() throws IOException {

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());

		N = Integer.parseInt(st.nextToken());
		map = new int[N][N];

		nowR = N / 2;
		nowC = N / 2;
		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 0; j < N; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
			}
		}

		for (int i = 1; i < N; i++) {
			move(i);
		}

		System.out.println(discardSandSum);

	}

	public void move(int count) {

		int i = 0;
		if (count == N - 1) {
			i = -1;
		}

		for (; i < 2; i++) {

			for (int j = 0; j < count; j++) {

				nowR = nowR + dirY[dir];
				nowC = nowC + dirX[dir];


				diffusion();

			}

			dir = (dir + 1) % 4;
		}

	}

	public void diffusion() {

		int sand = map[nowR][nowC];
		int discardedSand = 0;

		//서 -> 반시계
		//5 2 10 7 1 10 7 1 1
		int dxOfSand[][] = {
			//서
			{-2, -1, -1, 0, 0, 1, 1, 0, 0},
			//남
			{0, -1, 1, -1, 1, -1, 1, -2, 2},
			//동
			{2, 1, 1, 0, 0, -1, -1, 0, 0},
			//북
			{0, -1, 1, -1, 1, -1, 1, -2, 2}

		};

		int dyOfSand[][] = {
			//
			{0, -1, 1, -1, 1, -1, 1, -2, 2},
			//
			{2, 1, 1, 0, 0, -1, -1, 0, 0},

			//
			{0, -1, 1, -1, 1, -1, 1, -2, 2},
			//
			{-2, -1, -1, 0, 0, 1, 1, 0, 0}
		};

		int sum = 0;
		//5 2 10 7 1 10 7 1 2
		double percent[] = {0.05,0.1,0.1,0.07,0.07,0.01,0.01,0.02,0.02};

		for (int i = 0; i < 9; i++) {

			int nextR = nowR + dyOfSand[dir][i];
			int nextC = nowC + dxOfSand[dir][i];

			if (rangeCheck(nextR, nextC)) {
				map[nextR][nextC] = map[nextR][nextC] + (int)(sand * percent[i]);
			} else {
				discardedSand = discardedSand + (int)(sand * percent[i]);
			}

			sum = sum + (int)(sand * percent[i]);

		}

		if (rangeCheck(nowR + dirY[dir], nowC + dirX[dir])) {
			map[nowR + dirY[dir]][nowC + dirX[dir]] = map[nowR + dirY[dir]][nowC + dirX[dir]] + map[nowR][nowC] - sum;
		} else {
			discardedSand = discardedSand + map[nowR][nowC] - sum;
		}

		map[nowR][nowC] = 0;
		discardSandSum = discardSandSum + discardedSand;

	}

	public boolean rangeCheck(int r, int c) {
		return r >= 0 && r < N && c >= 0 && c < N;
	}

}




