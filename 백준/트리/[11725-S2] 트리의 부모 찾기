import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;

public class Main {

	List<List<Integer>> list = new ArrayList<>();
	boolean visit[];
	int answer[];

	public static void main(String[] args) throws IOException {
		new Main().solution();
	}

	public void solution() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		int N = Integer.parseInt(br.readLine());
		visit = new boolean[N+1];
		answer = new int[N+1];

		for (int i = 0; i <= N; i++) {
			list.add(new ArrayList<>());
		}

		for (int i = 0; i < N - 1; i++) {
			StringTokenizer st = new StringTokenizer(br.readLine());
			int start = Integer.parseInt(st.nextToken());
			int end = Integer.parseInt(st.nextToken());

			list.get(start).add(end);
			list.get(end).add(start);
		}

		dfs(1);

		for(int i=2; i<=N; i++) {
			System.out.println(answer[i]);
		}

	}

	public void dfs(int value) {
		visit[value] =true;

		List<Integer> now = list.get(value);

		for(int i=0; i<now.size(); i++) {
			if(!visit[now.get(i)]) {
				answer[now.get(i)] = value;
				dfs(now.get(i));
			}
		}
	}

}










