import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {

	public static void main(String[] args) throws IOException {
		new Main().solution();
	}


	int[] arr;
	int K;
	List<List<Integer>> list;

	public void solution() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		K = Integer.parseInt(br.readLine());

		StringTokenizer st = new StringTokenizer(br.readLine());
		StringBuilder sb = new StringBuilder();

		//완전 이진 트리 노드의 개수
		arr = new int[(int) Math.pow(2,K) -1];

		for(int i=0; i< arr.length ; i++) {
			arr[i] = Integer.parseInt(st.nextToken());
		}

		list = new ArrayList<>();
		for(int i=0; i< K ; i++) {
			list.add(new ArrayList<>());
		}

		dfs(0,arr.length-1,0);


		for (int i = 0; i < K; i++) {
			for (int j : list.get(i)) {
				sb.append(j).append(" ");
			}
			sb.append("\n");
		}

		System.out.println(sb);

	}

	public void dfs(int start, int end ,int depth) {

		if(depth == K) {
			return;
		}

		int mid = (start + end) / 2;
		list.get(depth).add(arr[mid]);

		// 왼쪽 노드(시작부터 중간 - 1 까지)
		dfs(start, mid - 1, depth + 1);
		// 오른쪽 노드 ( 중간 + 1 부터 끝까지)
		dfs(mid + 1, end, depth + 1);
	}







}










