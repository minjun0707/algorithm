import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.StringTokenizer;

import org.w3c.dom.Node;

public class Main {

	int N;
	int M;

	int[][] map;
	boolean[][] visit;
	List<Node> tomatoList = new ArrayList<>();

	int[] dirR = {0, 0, 1, -1};
	int[] dirC = {1, -1, 0, 0};

	public static void main(String[] args) throws IOException {
		new Main().solution();
	}

	public void solution() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());

		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());

		//저장될때부터 모든 토마토가 익었으면 0
		//
		//토마토가 모두 익지 못하면 -1
		// 0 익지 않은
		// 1 익은
		// -1 토마토가 들어있지 않은

		//모든 토마토가 익어있는 상태 0 출력

		//토마토가 목두 익지는 못하는 상황 -1 출력

		map = new int[M][N];
		visit = new boolean[M][N];
		//익지 않은 유무 - 익지 않은 토마토가 없다
		boolean isHaveRawTomato = false;




		for (int i = 0; i < M; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 0; j < N; j++) {
				int num = Integer.parseInt(st.nextToken());
				if(num == 0) {
					//익지않은 토마토가 있다
					isHaveRawTomato = true;
				}

				if(num ==1) {
					tomatoList.add(new Node(i,j));
				}
				map[i][j] = num;
			}
		}




		bfs();


		int answer= 0 ;
		//토마토가 다 익어있다
		if(isHaveRawTomato == false) {
			System.out.println(0);
			return;
		} else {
			for (int i = 0; i < M ; i++) {
				for (int j = 0; j < N; j++) {

					answer = Math.max(map[i][j],answer);

					if(map[i][j] == 0 ){
						System.out.println(-1);
						return;
					}
				}
			}

			System.out.println((answer-1));

		}


		//모두 익지 못하는경우 -1  map에 0이 있는 경우
		//

	}

	public void bfs() {

		Queue<Node> que = new LinkedList<>();

		for (int i = 0; i < tomatoList.size(); i++) {
			que.offer(new Node(tomatoList.get(i).r, tomatoList.get(i).c));
			visit[tomatoList.get(i).r][tomatoList.get(i).c] = true;
		}

		while (!que.isEmpty()) {



			Node node = que.poll();

			for (int i = 0; i < 4; i++) {


				int nextR = node.r + dirR[i];
				int nextC = node.c + dirC[i];

				//범위를 넘어가면 제외
				if (rangeCheck(nextR, nextC) == false) {
					continue;
				}

				//방문을 했으면 제외
				if (visit[nextR][nextC]) {
					continue;
				}

				//익지않은 토마토
				if (map[nextR][nextC] == 0) {
					map[nextR][nextC] = map[node.r][node.c] + 1;
					que.offer(new Node(nextR, nextC));
				}

			}

		}



	}

	public boolean rangeCheck(int r, int c) {
		return r >= 0 && r < M && c >= 0 && c < N;
	}

	class Node {
		int r;
		int c;

		public Node(int r, int c) {
			this.r = r;
			this.c = c;
		}
	}

}












