import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {

	int N;
	int[][] map;
	int size = 2;
	int eat = 0;
	boolean isEatFish = true;
	int count = 0;
	int[][] dist;
	int[] dirX = {1, -1, 0, 0};
	int[] dirY = {0, 0, 1, -1};
	Queue<Node> que = new LinkedList<Node>();

	Node shark = new Node(0,0);

	int minX = Integer.MAX_VALUE;
	int minY = Integer.MAX_VALUE;
	int minDistance = Integer.MAX_VALUE;

	public static void main(String[] args) throws IOException {
		new Main().solution();
	}

	public void solution() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		N = Integer.parseInt(br.readLine());
		map = new int[N][N];
		for (int i = 0; i < N; i++) {
			StringTokenizer st = new StringTokenizer(br.readLine());
			for (int j = 0; j < N; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
				if(map[i][j] == 9) {
					shark.x = j;
					shark.y = i;
				}
			}
		}


		while(isEatFish) {
			bfs(shark.y, shark.x);
		}

		System.out.println(count);

	}

	public void bfs(int y, int x) {

		isEatFish = false;
		dist = new int[N][N];
		dist[y][x] = 0;
		minX = Integer.MAX_VALUE;
		minY = Integer.MAX_VALUE;
		minDistance = Integer.MAX_VALUE;

		//bfs 시작
		que.offer(new Node(x,y));

		while(!que.isEmpty()) {

			Node node = que.poll();

			//4방향 탐색
			for(int i=0;i<4;i++) {
				int nextX = node.x + dirX[i];
				int nextY = node.y + dirY[i];

				//범위체크, 방문을 안했고, 지나갈수 있다!
				if(rangeCheck(nextX,nextY) == true && dist[nextY][nextX] == 0
				&& map[nextY][nextX] <= size ) {

					dist[nextY][nextX] = dist[node.y][node.x] + 1;

					//만약 상어가 먹을수있다면 (0이면 안되고 사이즈가 작아야한다)
					if(map[nextY][nextX] < size && (map[nextY][nextX]>=1 && map[nextY][nextX] <=6 )) {
						isEatFish = true;
						//만약 최소거리면?
						if(dist[nextY][nextX] < minDistance) {
							minDistance = dist[nextY][nextX];
							minY = nextY;
							minX = nextX;
						} else if(dist[nextY][nextX] == minDistance) {
							if(nextY < minY) {
								minDistance = dist[nextY][nextX];
								minY = nextY;
								minX = nextX;
							}
							else if (nextY == minY){
								if(nextX < minX) {
									minDistance = dist[nextY][nextX];
									minY = nextY;
									minX = nextX;
								}
							}
						}
					}
					que.offer(new Node(nextX, nextY));

				}

			}

		}

		//상어가while문을 돌지않고 먹은 상어위치 초기화 한 다음 거리 계산 한다음 리턴
		if(isEatFish == true) {

			eat++;
			if(size == eat) {
				eat = 0;
				size ++;
			}

			count = count + minDistance;
			map[y][x] = 0;
			map[minY][minX] = 9;
			shark.x = minX;
			shark.y = minY;

		}

	}

	public boolean rangeCheck(int x, int y) {
		return (x >= 0 && x < N && y >= 0 && y < N);
	}

	class Node {
		int x;
		int y;

		public Node(int x, int y) {
			this.x = x;
			this.y = y;
		}
	}

}
