import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.StringTokenizer;

import org.w3c.dom.Node;

public class Main {

	int N;
	int K;

	int minTime = 0;
	int answer = 0;

	int time[] = new int[1000001];


	public static void main(String[] args) throws IOException {
		new Main().solution();
	}

	public void solution() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());

		N = Integer.parseInt(st.nextToken());
		K = Integer.parseInt(st.nextToken());


		if (N >= K) {
			System.out.println((N-K));
			return;
		}

		Arrays.fill(time, -1);
		bfs();


	}

	public void bfs() {

		time[N] = 0;
		LinkedList<Integer> que = new LinkedList<>();
		que.offer(N);

		while(!que.isEmpty()) {

			 int now = que.poll();

			 if(now == K) {
				 minTime = time[now];
				 System.out.println(minTime);
				 return;
			 }

			int[] move =new int[]{now*2,now-1,now+1};

			for (int i = 0; i < 3 ; i++) {

				int next = move[i];

				if(next < 0 || next > 100000){
					continue;
				}

				if(time[next] == -1) {
					if (i == 0) {
						que.addFirst(next);
						time[next] = time[now];
					} else {
						que.add(next);
						time[next] = time[now] + 1;
					}
				}


			}

		}

	}

}











