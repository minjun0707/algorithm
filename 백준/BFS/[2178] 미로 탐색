import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {

	int N, M;
	int x, y;
	int maze[][];
	boolean visit[][];
	int dirX[] = {1, -1, 0, 0};
	int dirY[] = {0, 0, 1, -1};
	Queue<Node> que = new LinkedList<>();

	public static void main(String[] args) throws IOException {
		new Main().solution();
	}

	public void solution() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		maze = new int[N][M];
		visit = new boolean[N][M];

		for (int i = 0; i < N; i++) {
			String str = br.readLine();
			for (int j = 0; j < M; j++) {
				maze[i][j] = str.charAt(j) - '0';
			}
		}

		bfs(0, 0);
		System.out.print(maze[N-1][M-1]);

	}

	public void bfs(int y, int x) {

		//시작
		que.offer(new Node(x, y));
		visit[y][x] = true;

		//bfs 반복
		while (!que.isEmpty()) {
			//노드를 꺼낸다
			Node node = que.poll();

			//방향 탐색
			for (int i = 0; i < 4; i++) {
				int nextX = node.x + dirX[i];
				int nextY = node.y + dirY[i];

				//범위 체크, 방문 체크, 조건 체크
				if (rangeCheck(nextX, nextY) == true && visit[nextY][nextX] == false
					&& maze[nextY][nextX] == 1) {

					//큐에 넣는다
					que.offer(new Node(nextX,nextY));
					visit[nextY][nextX] = true;

					maze[nextY][nextX] = maze[node.y][node.x] + 1;
					if (visit[N-1][M-1] == true) {
						return;
					}

				}




			}

		}

	}

	private boolean rangeCheck(int nextX, int nextY) {
		return (nextX >= 0 && nextX < M && nextY >= 0 && nextY < N);
	}

	class Node {
		int x;
		int y;

		public Node(int x, int y) {
			this.x = x;
			this.y = y;

		}
	}

}
