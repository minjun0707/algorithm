import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Set;
import java.util.StringTokenizer;

import org.w3c.dom.Node;

public class Main {

	int map[][][];

	int M;
	int N;
	int H;

	//
	int[] dirR = {0, 0, -1, 1, 0, 0};
	int[] dirC = {-1, 1, 0, 0, 0, 0};
	int[] dirH = {0, 0, 0, 0, 1, -1};

	List<Node> tomatoList = new ArrayList<>();

	boolean isOneMoreNotRipeTomato = false;

	public static void main(String[] args) throws IOException {
		new Main().solution();
	}

	public void solution() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringBuilder sb = new StringBuilder();

		StringTokenizer st = new StringTokenizer(br.readLine());

		//가로
		M = Integer.parseInt(st.nextToken());

		//세로
		N = Integer.parseInt(st.nextToken());

		//높이
		H = Integer.parseInt(st.nextToken());

		map = new int[N][M][H];

		//모든 토마토가 익어있는 상태 0
		//map에서 0이없는 상황

		//모두 익지 못하는 상황 -1
		//bfs를 했는데 0이 남아있는 상황

		for (int i = 0; i < H; i++) {
			for (int j = 0; j < N; j++) {
				st = new StringTokenizer(br.readLine());
				for (int k = 0; k < M; k++) {

					map[j][k][i] = Integer.parseInt(st.nextToken());

					if (map[j][k][i] == 1) {
						tomatoList.add(new Node(j, k, i));
					}

					if (map[j][k][i] == 0) {
						isOneMoreNotRipeTomato = true;
					}
				}
			}
		}

		//0인 토마토가 없는 상태, 모두 익이ㅣ었디ㅏ , 0
		if (isOneMoreNotRipeTomato == false) {
			System.out.println(0);
			return;
		}

		bfs();

		int answer=  0;
		for (int i = 0; i < H; i++) {
			for (int j = 0; j < N; j++) {
				for (int k = 0; k <M ; k++) {
					answer =Math.max(answer,map[j][k][i]);

					if(map[j][k][i] ==0) {
						System.out.println(-1);
						return;
					}
				}
			}
		}

		System.out.println(answer-1);

	}

	public void bfs() {

		Queue<Node> que = new LinkedList();

		for (int i = 0; i < tomatoList.size(); i++) {
			que.offer(new Node(tomatoList.get(i).r, tomatoList.get(i).c, tomatoList.get(i).h));
		}

		while (!que.isEmpty()) {
			Node node = que.poll();

			for (int i = 0; i < 6; i++) {
				int nextR = node.r + dirR[i];
				int nextC = node.c + dirC[i];
				int nextH = node.h + dirH[i];

				if (rangeCheck(nextR, nextC, nextH) == false) {
					continue;
				}

				if(map[nextR][nextC][nextH] == 0) {
					map[nextR][nextC][nextH] = map[node.r][node.c][node.h] +1;
					que.offer(new Node(nextR,nextC,nextH));
				}
			}

		}
	}

	public boolean rangeCheck(int r, int c, int h) {
		return r >= 0 && r < N && c >= 0 && c < M && h >= 0 && h < H;
	}

	class Node {
		int r;
		int c;
		int h;

		public Node(int r, int c, int h) {
			this.r = r;
			this.c = c;
			this.h = h;
		}
	}

}














