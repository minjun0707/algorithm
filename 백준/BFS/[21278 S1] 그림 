import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Stack;
import java.util.StringTokenizer;

import org.w3c.dom.Node;

public class Main {

	int n;
	int m;

	//그림의 개수
	int count =0;


	// 가장 넓은 그림의 넓이
	int maxSize = 0;

	int[][] map;
	boolean[][] visit;
	int[] dirR = {1,-1,0,0};
	int[] dirC = {0,0,1,-1};
	public static void main(String[] args) throws IOException {
		new Main().solution();
	}

	public void solution() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());


		//세로 길이
		n = Integer.parseInt(st.nextToken());

		//가로 길이
		m = Integer.parseInt(st.nextToken());



		map = new int[n][m];
		visit = new boolean[n][m];

		for (int i = 0; i < n; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 0; j < m; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
			}
		}

		for(int i=0; i< n; i++) {
			for(int j=0; j < m; j++) {
				if(map[i][j] == 1 && visit[i][j] == false) {
					count ++;
					bfs(i,j);
				}
			}
		}

		System.out.println(count);
		System.out.println(maxSize);

	}

	public void bfs(int r, int c) {
		Queue<Cell> que = new LinkedList<>();
		que.offer(new Cell(r,c));
		visit[r][c] = true;


		int size = 0;
		while(!que.isEmpty()) {
			Cell cell = que.poll();
			size++;

			for(int i=0; i<4; i++) {
				int nextR = cell.r + dirR[i];
				int nextC = cell.c + dirC[i];

				if(rangeCheck(nextR,nextC)) {
					if(map[nextR][nextC] == 1 && visit[nextR][nextC] == false) {
						que.offer(new Cell(nextR,nextC));
						visit[nextR][nextC] = true;
					}
				}
			}
		}

		maxSize = Math.max(maxSize,size);


	}

	boolean rangeCheck(int r, int c) {
		return r>=0 && r < n && c >=0 && c < m;
	}

	class Cell{
		int r;
		int c;

		Cell (int r, int c) {
			this.r = r;
			this.c = c;
		}

	}

}















