import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Stack;
import java.util.StringTokenizer;

import org.w3c.dom.Node;

public class Main {

	int[] dirR = {0, 0, 0, 0, 1, -1};
	int[] dirC = {0, 0, 1, -1,0, 0};
	int[] dirL = {1, -1, 0, 0, 0, 0};
	char map[][][];
	boolean visit[][][];
	int L;
	int R;
	int C;

	int answer = 0;
	boolean isEscape = false;

	int startL = 0;
	int startR = 0;
	int startC = 0;

	public static void main(String[] args) throws IOException {
		new Main().solution();
	}

	public void solution() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		while (true) {
			//테스트 케이스 조건 입력 받기
			// L번  R행   C열
			StringTokenizer st = new StringTokenizer(br.readLine());
			L = Integer.parseInt(st.nextToken());
			R = Integer.parseInt(st.nextToken());
			C = Integer.parseInt(st.nextToken());

			//입력 값이 0 이면 끝이다
			if (L == 0) {
				break;
			}

			map = new char[L][R][C];
			visit = new boolean[L][R][C];
			isEscape = false;
			answer = 0;

			for (int i = 0; i < L; i++) {
				for (int j = 0; j < R; j++) {
					String temp = br.readLine();
					for (int k = 0; k < C; k++) {
						map[i][j][k] = temp.charAt(k);
						if(map[i][j][k] == 'S') {
							startL = i;
							startR = j;
							startC = k;
						}
					}
				}

				//빈공백 입력
				br.readLine();
			}

			bfs();

			if(isEscape) {
				System.out.print("Escaped in ");
				System.out.print(answer);
				System.out.println(" minute(s).");
			} else {
				System.out.println("Trapped!");
			}

			//출력테스트
			// for(int i=0; i<R ;i++) {
			// 	System.out.println();
			// 	for(int j=0; j<C; j++) {
			// 		System.out.print(" " + map[0][i][j]);
			// 	}
			// }
		}

		//탈출할수 있다면


	}

	void bfs() {
		Cell cell = new Cell(startL,startR,startC,0);
		visit[startL][startR][startC] = true;

		Queue<Cell> que = new LinkedList();
		que.offer(cell);

		while(!que.isEmpty()) {
			Cell nowCell = que.poll();

			for(int i=0; i<6; i++) {
				int nextL = nowCell.l + dirL[i];
				int nextR = nowCell.r + dirR[i];
				int nextC = nowCell.c + dirC[i];

				// System.out.println(nextL + " " + nextR + " " + nextC);

				if(rangeCheck(nextL,nextR,nextC) && visit[nextL][nextR][nextC] == false) {
					if((map[nextL][nextR][nextC] == '.' || map[nextL][nextR][nextC] == 'E') ) {

						que.offer(new Cell(nextL,nextR,nextC,nowCell.count +1));
						visit[nextL][nextR][nextC] = true;

						if(map[nextL][nextR][nextC] == 'E') {
							isEscape = true;
							answer = nowCell.count+1;
							return;
						}

					}
				}
			}


		}

	}

	boolean rangeCheck(int l, int r, int c) {
		return l>=0 && r>=0 && c>=0 && l <L && r < R && c < C;
	}


	class Cell {
		int l;
		int r;
		int c;
		int count;

		Cell(int l, int r, int c,int count) {
			this.l = l;
			this.r = r;
			this.c = c;
			this.count = count;
		}
	}
}
















