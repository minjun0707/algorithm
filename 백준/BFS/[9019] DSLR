import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Set;
import java.util.StringTokenizer;

import org.w3c.dom.Node;

public class Main {

	int T;

	int start;
	int end;
	boolean visit[];

	public static void main(String[] args) throws IOException {
		new Main().solution();
	}

	public void solution() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringBuilder sb = new StringBuilder();

		T = Integer.parseInt(br.readLine());

		for (int i = 0; i < T; i++) {
			StringTokenizer st = new StringTokenizer(br.readLine());
			start = Integer.parseInt(st.nextToken());
			end = Integer.parseInt(st.nextToken());

			visit = new boolean[10000];
			bfs();
		}

	}

	public void bfs() {
		Queue<Node> que = new LinkedList<>();

		que.offer(new Node(start));
		visit[start] = true;

		while (!que.isEmpty()) {
			Node node = que.poll();

			if(node.num == end) {
				System.out.println(node.answer);
				return;
			}

			int d = (2 * node.num) % 10000;
			int s = node.num  == 0 ? 9999 : node.num - 1;
			int l = (node.num % 1000) * 10 + node.num / 1000;
			int r = (node.num % 10) * 1000 + node.num / 10;

			if(!visit[d]) {
				Node next = new Node(d);
				next.answer = node.answer + "D";

				que.offer(next);
				visit[d] = true;
			}

			if(!visit[s]) {
				Node next = new Node(s);
				next.answer = node.answer + "S";

				que.offer(next);
				visit[s] = true;
			}

			if(!visit[l]) {
				Node next = new Node(l);
				next.answer = node.answer + "L";

				que.offer(next);
				visit[l] = true;
			}


			if(!visit[r]) {
				Node next = new Node(r);
				next.answer = node.answer + "R";

				que.offer(next);
				visit[r] = true;
			}

		}

	}

	class Node {
		int num;
		String answer ="";

		public Node(int num) {
			this.num = num;
		}
	}

}