import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class Main {

	int[][] map;
	boolean[][] visit;

	int[][] melt;

	int N;
	int M;

	int[] dirX = {1, -1, 0, 0};
	int[] dirY = {0, 0, 1, -1};

	public static void main(String[] args) throws IOException {
		new Main().solution();
	}

	public void solution() throws IOException {

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());

		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());

		map = new int[N][M];
		visit = new boolean[N][M];
		melt = new int[N][M];

		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 0; j < M; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
			}
		}

		int time = 0;
		//방산이 다 녹을 때 까지
		while (true) {
			time++;
			melt = new int[N][M];
			boolean isHaveIce = false;

			//빙산 녹이는 map 도는 for문
			for (int i = 0; i < N; i++) {
				for (int j = 0; j < M; j++) {

					if (map[i][j] == 0) {
						continue;
					}

					isHaveIce = true;

					//4방향 탐색
					for (int k = 0; k < 4; k++) {
						int nextR = i + dirX[k];
						int nextC = j + dirY[k];

						if (rangeCheck(nextR, nextC)) {
							if (map[nextR][nextC] == 0) {
								melt[i][j]++;
							}
						}

					}

				}
			}

			if (isHaveIce == false) {
				System.out.println(0);
				return;
			}

			//진짜 빙산 녹이
			for (int i = 0; i < N; i++) {
				for (int j = 0; j < M; j++) {
					map[i][j] = Math.max(map[i][j] - melt[i][j], 0);
				}
			}

			// 덩어리 체크

			visit = new boolean[N][M];
			int count = 0;
			for (int i = 0; i < N; i++) {
				for (int j = 0; j < M; j++) {
					if (map[i][j] == 0 || visit[i][j] == true) {
						continue;
					}

					bfs(i, j);
					count++;
				}
			}


			if (count >= 2) {
				System.out.println(time);
				break;
			}

		}

		//년도만큼 for문
		// -
		// - 덩어리 체크하는 bfs

	}

	public void bfs(int r, int c) {
		visit[r][c] = true;

		Queue<Node> que = new LinkedList<>();
		que.offer(new Node(r, c));

		while (!que.isEmpty()) {
			Node node = que.poll();

			for (int i = 0; i < 4; i++) {
				int nextR = node.r + dirY[i];
				int nextC = node.c + dirX[i];

				if (map[nextR][nextC] != 0 && visit[nextR][nextC] == false) {
					que.offer(new Node(nextR, nextC));
					visit[nextR][nextC] = true;
				}
			}

		}

	}

	public boolean rangeCheck(int r, int c) {
		return r >= 0 && r < N && c >= 0 && c < M;
	}

	class Node {
		int r;
		int c;

		public Node(int r, int c) {
			this.r = r;
			this.c = c;
		}
	}

}

