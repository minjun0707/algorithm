import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Set;
import java.util.StringTokenizer;

import org.w3c.dom.Node;

public class Main {

	int K;

	int W;
	int H;

	int map[][];
	boolean visit[][][];

	int[] dirX = {1, -1, 0, 0, -2, -1, 1, 2, 2, 1, -1, -2};
	int[] dirY = {0, 0, 1, -1, -1, -2, -2, -1, 1, 2, 2, 1};

	int[] jumpDirX = {-2, -1, 1, 2, 2, 1, -1, -2};
	int[] jumpDirY = {-1, -2, -2, -1, 1, 2, 2, 1};

	public static void main(String[] args) throws IOException {
		new Main().solution();
	}

	public void solution() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringBuilder sb = new StringBuilder();

		K = Integer.parseInt(br.readLine());
		StringTokenizer st = new StringTokenizer(br.readLine());

		W = Integer.parseInt(st.nextToken());
		H = Integer.parseInt(st.nextToken());

		map = new int[H][W];
		visit = new boolean[H][W][K+1];

		for (int i = 0; i < H; i++) {
			st = new StringTokenizer(br.readLine());

			for (int j = 0; j < W; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
			}
		}

		bfs();
	}

	public void bfs() {
		Queue<Node> que = new LinkedList<>();

		que.offer(new Node(0, 0, 0, 0));
		visit[0][0][0] = true;

		while (!que.isEmpty()) {

			Node node = que.poll();

			if(node.r == H-1 && node.c == W-1) {
				System.out.println(node.moveCount);
				return;
			}

			//12방향 탐색 앞 4방향 뒤 8방향
			for (int i = 0; i < 12; i++) {

				int nextY = node.r + dirY[i];
				int nextX = node.c + dirX[i];

				if (rangeCheck(nextY, nextX) == false) {
					continue;
				}

				//이동할 수 있는 경우
				if (map[nextY][nextX] == 0 ) {

					//한칸 점프하는 경우
					if (i < 4 && visit[nextY][nextX][node.jumpCount] == false) {
						visit[nextY][nextX][node.jumpCount] = true;
						que.offer(new Node(nextY,nextX, node.moveCount+1, node.jumpCount ));
					}
					//말 처럼 뛰는 경우 근데 점프 횟수를 다 소진했으면 점프 불가
					else if (i >= 4 && node.jumpCount < K && visit[nextY][nextX][node.jumpCount+1] == false) {
						visit[nextY][nextX][node.jumpCount+1] = true;
						que.offer(new Node(nextY,nextX, node.moveCount+1, node.jumpCount+1 ));
					}
				}

			}

		}

		System.out.println(-1);
		return;

	}

	public boolean rangeCheck(int y, int x) {
		return y >= 0 && y < H && x >= 0 && x < W;
	}

	class Node {
		int r;
		int c;
		int moveCount;
		int jumpCount;

		public Node(int r, int c, int moveCount, int jumpCount) {
			this.r = r;
			this.c = c;
			this.moveCount = moveCount;
			this.jumpCount = jumpCount;
		}
	}

}














