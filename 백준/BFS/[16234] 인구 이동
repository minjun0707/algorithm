import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {

	int N;
	int L;
	int R;

	int[] dirX = {1, -1, 0, 0};
	int[] dirY = {0, 0, 1, -1};
	Country map[][];
	Queue<Country> que = new LinkedList();
	List<Country> union = new ArrayList<>();

	public static void main(String[] args) throws IOException {
		new Main().solution();
	}

	public void solution() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());

		N = Integer.parseInt(st.nextToken());
		L = Integer.parseInt(st.nextToken());
		R = Integer.parseInt(st.nextToken());

		map = new Country[N][N];

		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 0; j < N; j++) {
				map[i][j] = new Country(i, j, Integer.parseInt(st.nextToken()));
			}
		}

		int count = 0;
		//더이상 인구이동을 못할때 까지
		while (true) {

			boolean isMove = false;

			for (int i = 0; i < N; i++) {
				for (int j = 0; j < N; j++) {
					if (map[i][j].visit == false) {

						//리스트에 넣기
						bfs(i, j);

						//리스트의 사이즈가 1이상이면 중간값 구하기
						// 그 값을 업데이트 해주고
						// 움직울수 있다 업뎃
						if (union.size() > 1) {
							int sum = 0;
							for (int k = 0; k < union.size(); k++) {
								sum = sum + union.get(k).population;
							}
							sum = sum / union.size();

							//칸 업데이트
							for (int k = 0; k < union.size(); k++) {
								union.get(k).population = sum;
							}

							isMove = true;
						}
						//리스트 초기화
						union.clear();
						//방문여부 초기화
					}
				}
			}

			//방문여부 초기화
			for (int i = 0; i < N; i++) {
				for (int j = 0; j < N; j++) {
					map[i][j].visit = false;
				}
			}
			//인구이동 첫번째 끝
			if (!isMove) {
				break;
			}
			count++;
		}

		System.out.println(count);



	}

	public void bfs(int r, int c) {
		que.offer(map[r][c]);
		union.add(map[r][c]);
		map[r][c].visit =true;

		while (!que.isEmpty()) {
			Country now = que.poll();
			for (int i = 0; i < 4; i++) {
				int nextI = now.i + dirX[i];
				int nextJ = now.j + dirY[i];

				if (rangeCheck(nextI, nextJ)) {
					int difference = Math.abs(now.population - map[nextI][nextJ].population);
					if (difference >= L && difference <= R && map[nextI][nextJ].visit == false) {
						que.offer(map[nextI][nextJ]);
						union.add(map[nextI][nextJ]);
						map[nextI][nextJ].visit = true;
					}
				}
			}

		}

	}

	public boolean rangeCheck(int i, int j) {
		return (i >= 0 && i < N && j >= 0 && j < N);
	}

	class Country {
		int i;
		int j;
		int population;
		boolean visit;

		Country(int i, int j, int population) {
			this.i = i;
			this.j = j;
			this.population = population;
		}

	}

}





