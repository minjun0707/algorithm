import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {

	int N;
	int M;
	int[][] map;
	int[][] virusMap;
	boolean[][] visit;
	int[] dirX = {1, -1, 0, 0};
	int[] dirY = {0, 0, 1, -1};
	int answer = Integer.MIN_VALUE;
	int count = 0;

	Queue<Node> que = new LinkedList<>();

	public static void main(String[] args) throws IOException {
		new Main().solution();
	}

	public void solution() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());

		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		map = new int[N][M];
		visit = new boolean[N][M];

		//map 입력
		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 0; j < M; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
			}
		}

		dfs(0);
		//문 세우기
		System.out.println(answer);

	}

	public void dfs(int depth) {

		//탈출 구문
		//문을 3개 세웠으면
		if (depth == 3) {

			//bfs 해!
			bfs();

			count=0;
			for(int i = 0 ; i<N; i++) {
				for (int j = 0; j < M; j++) {
					if(virusMap[i][j] == 0) {
						count++;
					}
				}
			}

			answer = Math.max(answer,count);
			return;
		}

		//반복 구문
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				if (map[i][j] == 0) {
					//벽을 세워
					map[i][j] = 1;
					dfs(depth + 1);

					//벽 초기화
					map[i][j] = 0;
				}
			}
		}

	}

	public void bfs() {

		virusMap = new int[N][M];

		//copy map
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				virusMap[i][j] = map[i][j];
				if(virusMap[i][j] == 2) {
					que.offer(new Node(j,i));
				}
			}
		}

		while (!que.isEmpty()) {
			Node node = que.poll();

			for (int i = 0; i < 4; i++) {
				int nextX = node.x + dirX[i];
				int nextY = node.y + dirY[i];

				if (rangeCheck(nextX, nextY) == true && virusMap[nextY][nextX] == 0) {
					que.offer(new Node(nextX,nextY));
					virusMap[nextY][nextX] = 2;
				}

			}

		}

	}

	public boolean rangeCheck(int x, int y) {
		return (x >= 0 && x < M && y >= 0 && y < N);
	}

	class Node {

		int x;
		int y;

		public Node(int x, int y) {
			this.x = x;
			this.y = y;
		}
	}

}
