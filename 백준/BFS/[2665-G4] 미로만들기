import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {

	int n;

	int[] dirX = {1, -1, 0, 0};
	int[] dirY = {0, 0, 1, -1};
	int map[][];
	boolean visit[][];

	public static void main(String[] args) throws IOException {
		new Main().solution();
	}

	public void solution() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		 n = Integer.parseInt(br.readLine());

		 map = new int[n][n];
		 visit = new boolean[n][n];

		for (int i = 0; i < n; i++) {
			String arr[] = br.readLine().split("");
			for (int j = 0; j < n; j++) {
				map[i][j] = Integer.parseInt(arr[j]);
			}
		}

		int count = bfs(0, 0);
		System.out.println(count);

	}

	public int bfs(int r, int c) {

		PriorityQueue<Node> que = new PriorityQueue<>((s1,s2)-> {
			if(s1.count > s2.count) {
				return 1;
			} else if(s1.count < s2.count) {
				return -1;
			} else {
				return 0;
			}
		});

		que.offer(new Node(r, c,0));

		while (!que.isEmpty()) {

			Node node = que.poll();


			if(node.r == n-1 && node.c == n-1) {
				return node.count;
			}

			for (int i = 0; i < 4; i++) {
				int nextR = node.r + dirX[i];
				int nextC = node.c + dirY[i];

				if (rangeCheck(nextR, nextC) && visit[nextR][nextC] == false) {

					visit[nextR][nextC] = true;
					if(map[nextR][nextC] == 1) {
						que.offer(new Node(nextR,nextC, node.count));
					}
					//ë²½
					else {
						que.offer(new Node(nextR,nextC, node.count+1));
					}
				}

			}

		}

		return 0;
	}

	public boolean rangeCheck(int r, int c) {
		return r >= 0 && r < n && c >= 0 && c < n;
	}

	class Node {
		int r;
		int c;
		int count;

		Node(int r, int c,int count) {
			this.r = r;
			this.c = c;
			this.count = count;
		}
	}

}










