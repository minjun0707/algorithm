import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.StringTokenizer;

import org.w3c.dom.Node;

public class Main {

	int R;
	int C;

	char[][] map;
	int[][] visit;
	int startR;
	int startC;

	int fireR;
	int fireC;

	int[] dirY = {0, 0, 1, -1};
	int[] dirX = {1, -1, 0, 0};

	List<Node> fireList = new ArrayList<>();

	int fire = 1;
	int person = 0;

	public static void main(String[] args) throws IOException {
		new Main().solution();
	}

	public void solution() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());

		R = Integer.parseInt(st.nextToken());
		C = Integer.parseInt(st.nextToken());

		map = new char[R][C];

		for (int i = 0; i < R; i++) {
			String str = br.readLine();
			for (int j = 0; j < C; j++) {
				map[i][j] = str.charAt(j);

				if (map[i][j] == 'J') {
					startR = i;
					startC = j;
				} else if (map[i][j] == 'F') {
					fireList.add(new Node(i,j,0,fire));
				}
			}
		}

		bfs();

	}

	public void bfs() {
		Queue<Node> que = new LinkedList<>();
		que.offer(new Node(fireR,fireC,0,fire));
		for (int i = 0; i < fireList.size(); i++) {
			que.offer(fireList.get(i));
		}
		que.offer(new Node(startR,startC,0,person));

		while (!que.isEmpty()) {
			Node node = que.poll();

			for (int i = 0; i < 4; i++) {
				int nextR = node.r + dirY[i];
				int nextC = node.c + dirX[i];

				if(isEscape(node.r,node.c) && node.type == person) {
					System.out.println(node.distance+1);
					return;
				}

				if(node.type == fire) {
					if(rangeCheck(nextR,nextC)==false){
						continue;
					}
				}

				//불이 이동할수 있으면
				if(node.type == fire) {
					//이동
					if(map[nextR][nextC] == 'J' || map[nextR][nextC] == '.') {
						//그 자리를 불로
						map[nextR][nextC] = 'F';
						que.offer(new Node(nextR,nextC,0,fire));
					}

				} else {
					if(map[nextR][nextC] == '.') {
						//그 자리를 사람의 위치로
						map[nextR][nextC] = 'J';
						que.offer(new Node(nextR,nextC,node.distance+1,person));
					}
				}




			}

		}

		System.out.println("IMPOSSIBLE");


	}

	public boolean rangeCheck(int r, int c){
		return r >=0 && r <R && c>= 0 && c< C;
	}


	public boolean isEscape(int r,int c) {
		if(r == 0 || c ==0 || r == R-1 || c == C-1) {
			return true;
		} else {
			return false;
		}
	}

	class Node {
		int r;
		int c;

		int distance;

		int type;

		public Node(int r, int c, int distance,int type) {
			this.r = r;
			this.c = c;
			this.distance = distance;
			this.type = type;
		}
	}

}











