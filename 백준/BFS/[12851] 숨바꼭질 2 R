import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.StringTokenizer;

import org.w3c.dom.Node;

public class Main {

	int N;
	int K;

	int minTime = Integer.MAX_VALUE;
	int answer = 0;

	int time[] = new int[1000001];

	Queue<Integer> que = new LinkedList<Integer>();

	public static void main(String[] args) throws IOException {
		new Main().solution();
	}

	public void solution() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());

		N = Integer.parseInt(st.nextToken());
		K = Integer.parseInt(st.nextToken());


		if (N >= K) {
			System.out.println((N-K) + "\n1");
			return;
		}

		bfs();

		System.out.println(minTime);

		System.out.println(answer);
	}

	public void bfs() {

		que.offer(N);
		time[N] = 1;


		while (!que.isEmpty()) {
			int now = que.poll();

			if(time[now] > minTime) {
				continue;
			}

			int move[] = new int[]{now-1,now+1,now*2};
			for (int i = 0; i < 3; i++) {

				if (move[i] <= 0 || move[i] > 100000 ){
					continue;
				}

				if(move[i] == K) {
					minTime = time[now];
					answer++;
				}

				if(time[move[i]] == 0 || time[move[i]] == time[now] + 1){
					que.offer(move[i]);
					time[move[i]] = time[now] + 1;
				}


			}
		}

	}

}











