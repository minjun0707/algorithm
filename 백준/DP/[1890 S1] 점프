import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Stack;
import java.util.StringTokenizer;

import org.w3c.dom.Node;

public class Main {

	int n;
	int m;

	//그림의 개수
	int count = 0;

	// 가장 넓은 그림의 넓이
	int maxSize = 0;

	int[][] map;
	boolean[][] visit;
	int[] dirR = {1, -1, 0, 0};
	int[] dirC = {0, 0, 1, -1};

	public static void main(String[] args) throws IOException {
		new Main().solution();
	}

	public void solution() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		int n = Integer.parseInt(br.readLine());
		int map[][] = new int[n][n];
		long dp[][] = new long[n][n];
		for (int i = 0; i < n; i++) {
			StringTokenizer st = new StringTokenizer(br.readLine());
			for (int j = 0; j < n; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
			}
		}

		dp[0][0] = 1L;

		for(int i=0; i < n; i++) {
			for(int j=0; j<n; j++) {
				int moveLength = map[i][j];

				if(i==n-1 && j==n-1) {
					break;
				}

				//오른쪽으로 점프
				if(dp[i][j] != 0 && j + moveLength < n) {
					dp[i][j + moveLength] += dp[i][j] ;
				}

				//아래쪽으로 점프
				if(dp[i][j] != 0 && i + moveLength < n) {
					dp[i+moveLength][j] += dp[i][j];
				}
			}
		}

		System.out.println(dp[n-1][n-1]);



	}

}















