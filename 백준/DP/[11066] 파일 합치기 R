import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.StringTokenizer;
import java.util.function.Predicate;

public class Main {
	int testCase;
	int dp[][];
	int sum[];

	public static void main(String[] args) throws IOException {
		new Main().solution();
	}

	public void solution() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		testCase = Integer.parseInt(br.readLine());

		for (int tc = 0; tc < testCase; tc++) {
			int k = Integer.parseInt(br.readLine());
			StringTokenizer st = new StringTokenizer(br.readLine());

			dp = new int[k + 1][k + 1];
			sum = new int[k + 1];

			for (int i = 1; i <= k; i++) {
				int novel = Integer.parseInt(st.nextToken());
				sum[i] = sum[i - 1] + novel;
			}

			//묶이는 개수(1,2,3개 --- k개)
			for (int i = 1; i <= k; i++) {
				for (int from = 1; from + i <= k; from++) {
					int to = from + i;
					dp[from][to] = Integer.MAX_VALUE;
					for (int divide = from; divide < to; divide++) {
						dp[from][to] = Math.min(dp[from][to], dp[from][divide] + dp[divide + 1][to]
							+ sum[to] - sum[from - 1]);
					}
				}
			}

			System.out.println(dp[1][k]);
		}

	}

}



