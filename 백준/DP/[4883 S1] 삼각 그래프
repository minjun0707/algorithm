import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.*;

public class Main {

    static final int left = 0;
    static final int mid = 1;
    static final int right = 2;

    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        List<Integer> answerList = new ArrayList<>();

        int tcCount = 0;
        int answerK = 0;
        int answerN = Integer.MAX_VALUE;
        while (true) {

            int N = Integer.parseInt(br.readLine());

            if (N == 0) {
                break;
            }

            int dp[][] = new int[N][3];

            for (int i = 0; i < N; i++) {
                StringTokenizer st = new StringTokenizer(br.readLine());

                dp[i][left] = Integer.parseInt(st.nextToken());
                dp[i][mid] = Integer.parseInt(st.nextToken());
                dp[i][right] = Integer.parseInt(st.nextToken());
            }

            dp[0][right] += dp[0][mid];
            dp[1][left] += dp[0][mid];
            dp[1][mid] += Math.min(dp[0][mid], Math.min(dp[0][right], dp[1][left]));
            dp[1][right] += Math.min(dp[0][mid], Math.min(dp[1][mid], dp[0][right]));

            for (int i = 2; i < N; i++) {

                dp[i][left] += Math.min(dp[i - 1][left], dp[i - 1][mid]);

                dp[i][mid] += Math.min(Math.min(dp[i][left], dp[i - 1][left]),
                        Math.min(dp[i - 1][mid], dp[i - 1][right]));

                dp[i][right] += Math.min(Math.min(dp[i][mid], dp[i - 1][mid]),
                        dp[i - 1][right]);

            }

            tcCount++;
            System.out.println(tcCount + ". " + dp[N - 1][mid]);

        }

    }

}
