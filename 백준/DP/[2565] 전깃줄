import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.StringTokenizer;
import java.util.function.Predicate;

public class Main {
	int N;
	int dp[];
	List<Line> list = new ArrayList<Line>();

	public static void main(String[] args) throws IOException {
		new Main().solution();
	}

	public void solution() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		N = Integer.parseInt(br.readLine());
		dp = new int[N+1];

		//dp 초기화
		for (int i = 0; i < N+1; i++) {
			dp[i] = 1;
		}

		for (int i = 1; i <= N ; i++) {
			StringTokenizer st = new StringTokenizer(br.readLine());
			int start = Integer.parseInt(st.nextToken());
			int end = Integer.parseInt(st.nextToken());
			list.add(new Line(start,end));
		}

		Collections.sort(list,(s1,s2) -> {
			if(s1.start > s2.start) {
				return 1;
			} else if(s1.start < s2.start) {
				return -1;
			} else {
				return 0;
			}
		});

		int max =0;
		for (int i = 1; i <= N ; i++) {
			for (int j = 1; j < i; j++) {
				if(list.get(i-1).end > list.get(j-1).end) {
					dp[i] = Math.max(dp[j]+1,dp[i]);
				}
			}
			max = Math.max(max,dp[i]);
		}

		System.out.println(N-max);


	}

	class Line {
		int start;
		int end;

		public Line(int start, int end) {
			this.start = start;
			this.end = end;
		}

		public int getStart() {
			return this.start;
		}
	}

}



