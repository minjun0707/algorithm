import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.StringTokenizer;
import java.util.function.Predicate;

public class Main {
	int N;
	int[] dpDown;
	int[] dpUp;
	int[] arr;

	public static void main(String[] args) throws IOException {
		new Main().solution();
	}

	public void solution() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		N = Integer.parseInt(br.readLine());

		dpUp = new int[N+1];
		dpDown = new int[N+1];
		arr = new int[N+1];

		StringTokenizer st = new StringTokenizer(br.readLine());
		for (int i = 1; i <=N ; i++) {
			arr[i] = Integer.parseInt(st.nextToken());
		}

		dpDown[N] = 1;

		for (int i = 1; i <= N ; i++) {
			dpUp[i] = 1;
			dpDown[i] = 1;
		}
		//dp up
		for (int i = 1; i <= N; i++) {
			for (int j = 1; j < i; j++) {
				if(arr[i] > arr[j]) {
					dpUp[i] = Math.max(dpUp[j]+1,dpUp[i]);
				}
			}
		}


		for (int i = N; i >= 1; i--) {
			for (int j = N; j > i; j--) {
				if(arr[i] > arr[j]) {
					dpDown[i] = Math.max(dpDown[j]+1,dpDown[i]);
				}
			}
		}



		int max = 0;
		for (int i = 1; i <= N ; i++) {
			max = Math.max(dpDown[i]+dpUp[i],max);
		}

		System.out.println(max-1);

	}

}



