import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.StringTokenizer;

public class Main {

	int N;
	int M;
	int[][] map;
	int[][] dp;
	int[][] temp;

	public static void main(String[] args) throws IOException {
		new Main().solution();
	}

	public void solution() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		StringTokenizer st = new StringTokenizer(br.readLine());
		//y
		N = Integer.parseInt(st.nextToken());
		//x
		M = Integer.parseInt(st.nextToken());

		map = new int[N + 1][M + 1];
		dp = new int[N + 1][M + 1];
		temp = new int[2][M + 2];

		for (int i = 1; i <= N; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 1; j <= M; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
			}
		}

		//첫번째 줄 dp
		dp[1][1] = map[1][1];

		for (int i = 2; i <= M; i++) {
			dp[1][i] = dp[1][i - 1] + map[1][i];
		}

		for (int i = 2; i <= N; i++) {

			//왼쪽에서 오른쪽으로 >>>>>.
			temp[0][0] = dp[i - 1][1];
			for (int j = 1; j <= M; j++) {
				// 위쪽이랑, 오른쪽
				temp[0][j] = Math.max(dp[i - 1][j], temp[0][j - 1]) + map[i][j];
			}

			//오른쪽에서 왼쪽으로
			temp[1][M+1] = dp[i - 1][M];
			for (int j = M; j >= 1; j--) {
				// 위쪽이랑, 오른쪽
				temp[1][j] = Math.max(dp[i - 1][j], temp[1][j + 1]) + map[i][j];
			}

			for (int j = 1; j <= M; j++) {
				dp[i][j] = Math.max(temp[0][j], temp[1][j]);
			}


		}

		System.out.println(dp[N][M]);

	}

}


