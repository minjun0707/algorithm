import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.StringTokenizer;

public class Main {

	int N;
	int[][] map;
	int[][] dp;

	int[] dirX = {1, -1, 0, 0};
	int[] dirY = {0, 0, 1, -1};

	//현재 dfs에서 최고값
	int max=0;
	int answer =0;



	public static void main(String[] args) throws IOException {
		new Main().solution();
	}

	public void solution() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		N = Integer.parseInt(br.readLine());
		map = new int[N][N];
		dp = new int[N][N];

		for (int i = 0; i < N; i++) {
			StringTokenizer st = new StringTokenizer(br.readLine());
			for (int j = 0; j < N; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
			}
		}

		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
					max = Math.max(max,dfs(i, j));
			}
		}
		System.out.println(max);
	}

	//현재위치에서 갈 수 있는 길이를 반환
	int dfs(int y, int x) {
		//dp의 값이 존재하는 경우
		if(dp[y][x] != 0) {
			return dp[y][x];
		}

		//방문
		dp[y][x] = 1;

		for (int i = 0; i < 4; i++) {
			int nextX = x + dirX[i];
			int nextY = y + dirY[i];

			//다음 노드로 움직일 수 있으면
			if (rangeCheck(nextX, nextY)) {
				if (map[nextY][nextX] > map[y][x]) {
					dp[y][x] = Math.max(dp[y][x],dfs(nextY,nextX) +1);
				}
			}
		}

		return dp[y][x];
	}


	boolean rangeCheck(int x, int y) {
		return (x >= 0 && x < N && y >= 0 && y < N);
	}
}


