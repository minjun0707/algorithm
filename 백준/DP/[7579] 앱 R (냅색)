import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringTokenizer;
import java.util.function.Predicate;

public class Main {

	int answer = Integer.MAX_VALUE;

	public static void main(String[] args) throws IOException {
		new Main().solution();
	}

	public void solution() throws IOException {

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		//첫번째 줄
		StringTokenizer st = new StringTokenizer(br.readLine());

		//N개 앱
		int N = Integer.parseInt(st.nextToken());

		//M 바이트 이상 확보
		int M = Integer.parseInt(st.nextToken());

		int[] usingMemory = new int[N + 1];
		int[] memoryCost = new int[N + 1];
		int[][] dp = new int[N+1][10001];

		//두번째 줄
		StringTokenizer st1 = new StringTokenizer(br.readLine());
		StringTokenizer st2 = new StringTokenizer(br.readLine());

		//N만큼 반복해서 usingMemory 입력받기
		for (int i = 1; i <= N; i++) {
			usingMemory[i] = Integer.parseInt(st1.nextToken());
			memoryCost[i] = Integer.parseInt(st2.nextToken());
		}

		for (int i = 1; i <=N ; i++) {
			for (int j = 1; j <=10000 ; j++) {
				dp[i][j] = dp[i-1][j];
				if(j-memoryCost[i] >=0) {
					dp[i][j] = Math.max(dp[i][j],dp[i-1][j-memoryCost[i]] + usingMemory[i]);
				}

				if(dp[i][j] >= M ) {
					answer = Math.min(j,answer);
				}
			}
		}


		System.out.println(answer);

	}
}





