import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.StringTokenizer;
import java.util.function.Predicate;

public class Main {

	// 가로
	int N;

	// 세로
	int M;
	// 이동횟수
	int dp[][];
	int map[][];

	int[] dirX = {1, -1, 0, 0};
	int[] dirY = {0, 0, 1, -1};

	public static void main(String[] args) throws IOException {
		new Main().solution();
	}

	public void solution() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());

		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());

		dp = new int[N][M];
		map = new int[N][M];

		//dp 초기화 -1
		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 0; j < M; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
				dp[i][j] = -1;
			}
		}

		int answer = dfs(0, 0);
		System.out.println(answer);

	}

	//반환 값은 현재 지점까지의 이동거리
	public int dfs(int y, int x) {

		//마지막에서 탈출
		if (x == M - 1 && y == N - 1) {
			return 1;
		}

		//dp탈출
		if (dp[y][x] != -1) {
			return dp[y][x];
		}

		//방문
		dp[y][x] = 0;

		//탈출조건
		for (int i = 0; i < 4; i++) {
			int nextX = x + dirX[i];
			int nextY = y + dirY[i];

			if (rangeCheck(nextX, nextY)) {
				if (map[nextY][nextX] < map[y][x]) {
					dp[y][x] = dp[y][x] + dfs(nextY, nextX);
				}
			}
		}

		return dp[y][x];
	}

	public boolean rangeCheck(int x, int y) {
		return x >= 0 && x < M && y >= 0 && y < N;
	}
}



