import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.lang.reflect.Array;
import java.util.*;

public class Main {

	int N;
	int E;

	int v1;
	int v2;

	int dist[];

	long answer = 0;
	List<List<Node>> graph = new ArrayList<>();

	boolean flag;

	public static void main(String[] args) throws IOException {
		new Main().solution();
	}

	public void solution() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;

		//첫번째줄 입략
		st = new StringTokenizer(br.readLine());

		//N개의 정점
		N = Integer.parseInt(st.nextToken());
		//E개의 간선
		E = Integer.parseInt(st.nextToken());

		//List 초기화
		for (int i = 0; i <= N; i++) {
			graph.add(new ArrayList<>());
		}

		for (int i = 0; i < E; i++) {
			//한줄 입력
			st = new StringTokenizer(br.readLine());

			int a = Integer.parseInt(st.nextToken());
			int b = Integer.parseInt(st.nextToken());
			int c = Integer.parseInt(st.nextToken());

			//양방향 처리
			graph.get(a).add(new Node(b, c));
			graph.get(b).add(new Node(a, c));
		}

		//마지막줄 입력
		st = new StringTokenizer(br.readLine());

		v1 = Integer.parseInt(st.nextToken());
		v2 = Integer.parseInt(st.nextToken());

		dist = new int[N + 1];


		answer = Math.min(dijkstra(1,v1) +dijkstra(v1,v2) +dijkstra(v2,N), dijkstra(1,v2) + dijkstra(v2,v1)+ dijkstra(v1,N));;


		if(flag) {
			System.out.println(-1);
		} else {
			System.out.println(answer);
		}

	}

	public int dijkstra(int start, int end) {
		//dist 초기화
		Arrays.fill(dist, 800 * 200000);

		PriorityQueue<Node> que = new PriorityQueue<>((s1, s2) -> {
			if (s1.cost > s2.cost) {
				return 1;
			} else if (s1.cost < s2.cost) {
				return -1;
			} else {
				return 0;
			}
		});

		que.offer(new Node(start, 0));
		dist[start] = 0;

		while (!que.isEmpty()) {

			Node node = que.poll();

			if (node.cost > dist[node.idx]) {
				continue;
			}

			for (int i = 0; i < graph.get(node.idx).size(); i++) {
				Node nextNode = graph.get(node.idx).get(i);

				if (dist[nextNode.idx] > node.cost + nextNode.cost) {
					dist[nextNode.idx] = node.cost + nextNode.cost;
					que.offer(new Node(nextNode.idx, dist[nextNode.idx]));
				}
			}
		}

		if(dist[end] == 200000*800) {
			flag=true;
		}

		return dist[end];
	}

	class Node {
		int idx;
		int cost;

		Node(int idx, int cost) {
			this.idx = idx;
			this.cost = cost;
		}

	}

}











