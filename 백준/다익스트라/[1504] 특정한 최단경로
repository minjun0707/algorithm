import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

import org.w3c.dom.Node;

public class Main {

	int N;
	int E;
	int INF = 200000 * 1000;

	int v1;
	int v2;
	int[] dist;
	
	List<List<Node>> graph = new ArrayList();
	
	public static void main(String[] args) throws IOException {
		new Main().solution();
	}

	public void solution() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringBuilder sb = new StringBuilder();
		
		//한줄입력받기
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		E = Integer.parseInt(st.nextToken());

		dist = new int[N+1];
		
		//그래프 초기화
		for (int i = 0; i < N+1; i++) {
			graph.add(new ArrayList<>());
		}


		// 간선 설정
		for (int i = 0; i < E; i++) {
			st =new StringTokenizer(br.readLine());

			int a = Integer.parseInt(st.nextToken());
			int b = Integer.parseInt(st.nextToken());
			int c = Integer.parseInt(st.nextToken());

			graph.get(a).add(new Node(b,c));
			graph.get(b).add(new Node(a,c));
		}

		// 한줄 입력
		st =new StringTokenizer(br.readLine());
		v1 = Integer.parseInt(st.nextToken());
		v2 = Integer.parseInt(st.nextToken());


		//첫번째
		int answer1 = 0;
		answer1 += dijkstra(1,v1);
		answer1 += dijkstra(v1,v2);
		answer1 += dijkstra(v2,N);

		//두번째
		int answer2 = 0;
		answer2 += dijkstra(1,v2);
		answer2 += dijkstra(v2,v1);
		answer2 += dijkstra(v1,N);

		if(answer1 >= INF && answer2 >= INF ){
			System.out.println(-1);
		} else{
			System.out.println(Math.min(answer1,answer2));
		}

		
		
		



	}

	public int dijkstra(int start,int end) {

		Arrays.fill(dist,INF);

		PriorityQueue<Node> que = new PriorityQueue<>((a,b) -> {
			if( a. cost > b.cost) {
				return 1;
			} else {
				return -1;
			}
		});

		que.offer(new Node(start,0));
		dist[start] = 0;

		while(!que.isEmpty()) {
			Node node = que.poll();

			if(node.cost > dist[node.idx]) {
				continue;
			}

			for (int i = 0; i < graph.get(node.idx).size(); i++) {
				Node nextNode = graph.get(node.idx).get(i);

				if(dist[nextNode.idx] > node.cost + nextNode.cost) {
					dist[nextNode.idx] = node.cost + nextNode.cost;
					que.offer(new Node(nextNode.idx, dist[nextNode.idx]));
				}


			}


		}

		return dist[end];





	}

	class Node {
		int idx;
		int cost;


		public Node(int idx, int cost) {
			this.cost = cost;
			this.idx = idx;
		}
	}

}









