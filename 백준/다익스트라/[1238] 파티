import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.lang.reflect.Array;
import java.util.*;

public class Main {

	List<List<Node>> graph = new ArrayList<>();
	int dist[];

	int N;
	int M;
	int X;

	int answer = -1;

	public static void main(String[] args) throws IOException {
		new Main().solution();
	}

	public void solution() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;

		//첫번째 입력 3개
		st = new StringTokenizer(br.readLine());

		//N명의 학생
		N = Integer.parseInt(st.nextToken());

		//M개의 간선
		M = Integer.parseInt(st.nextToken());

		// X번 마을에 모이자!
		X = Integer.parseInt(st.nextToken());

		//그래프 초기화

		for (int i = 0; i <= N; i++) {
			graph.add(new ArrayList<>());
		}

		//간선 정보 입력
		for (int i = 0; i < M; i++) {
			//한줄 입력
			st = new StringTokenizer(br.readLine());

			int start = Integer.parseInt(st.nextToken());
			int end = Integer.parseInt(st.nextToken());
			int cost = Integer.parseInt(st.nextToken());

			//단반향
			graph.get(start).add(new Node(end, cost));

		}

		//다익스트라를 사람의 횟수만큼. 시작지점에는 사람이 산다.
		for (int i = 1; i <= N; i++) {
			answer = Math.max(dijkstra(i, X) + dijkstra(X, i), answer);
		}

		System.out.println(answer);
	}

	public int dijkstra(int start, int end) {

		dist = new int[N + 1];
		Arrays.fill(dist,1000*10000*100);
		dist[start] = 0;

		PriorityQueue<Node> que = new PriorityQueue<>((s1, s2) -> {
			if (s1.cost > s2.cost) {
				return 1;
			} else if (s1.cost < s2.cost) {
				return -1;
			} else {
				return 0;
			}
		});

		que.offer(new Node(start, 0));

		while (!que.isEmpty()) {
			Node node = que.poll();

			if (node.cost > dist[node.idx]) {
				continue;
			}

			for (int i = 0; i < graph.get(node.idx).size(); i++) {

				Node nextNode = graph.get(node.idx).get(i);

				if (dist[nextNode.idx] > node.cost + nextNode.cost) {
					dist[nextNode.idx] = node.cost + nextNode.cost;
					que.offer(new Node(nextNode.idx, dist[nextNode.idx]));
				}
			}

		}

		return dist[end];

	}

	class Node {
		int idx;
		int cost;

		Node(int idx, int cost) {
			this.idx = idx;
			this.cost = cost;
		}
	}

}











