import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

import org.w3c.dom.Node;

public class Main {

	int N;
	int M;
	int X;

	int[] dist;

	//최대 간선 + 최대 소비
	int INF = 10000 * 100;

	int answer = 0;
	List<List<Node>> graph = new ArrayList();

	public static void main(String[] args) throws IOException {
		new Main().solution();
	}

	public void solution() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringBuilder sb = new StringBuilder();

		StringTokenizer st = new StringTokenizer(br.readLine());

		//정점
		N = Integer.parseInt(st.nextToken());

		//간선
		M = Integer.parseInt(st.nextToken());
		X = Integer.parseInt(st.nextToken());

		//초기화
		dist = new int[N + 1];
		for (int i = 0; i < N + 1; i++) {
			graph.add(new ArrayList<Node>());
		}

		//간선 추가
		for (int i = 0; i < M; i++) {
			st = new StringTokenizer(br.readLine());
			int start = Integer.parseInt(st.nextToken());
			int end = Integer.parseInt(st.nextToken());
			int cost = Integer.parseInt(st.nextToken());

			graph.get(start).add(new Node(end, cost));
		}

		// 다익스트라
		// 사람의 개수 만큼
		for (int i = 1; i <= N; i++) {
			//사람이 사는 마을의 시작점, 끝나는점
			int distance = dijkstra(i, X) + dijkstra(X, i);
			answer = Math.max(distance, answer);
		}

		System.out.println(answer);
	}

	public int dijkstra(int start, int end) {

		Arrays.fill(dist, INF);

		PriorityQueue<Node> que = new PriorityQueue<>((a, b) -> {
			if (a.cost > b.cost) {
				return 1;
			} else {
				return -1;
			}
		});

		dist[start] = 0;

		que.offer(new Node(start, 0));

		while (!que.isEmpty()) {
			Node node = que.poll();

			if (node.cost > dist[node.idx]) {
				continue;
			}

			for (int i = 0; i < graph.get(node.idx).size(); i++) {
				Node nextNode = graph.get(node.idx).get(i);
				if (dist[nextNode.idx] > node.cost + nextNode.cost) {
					dist[nextNode.idx] = node.cost + nextNode.cost;
					que.offer(new Node(nextNode.idx, dist[nextNode.idx]));
				}

			}
		}

		return dist[end];

	}

	class Node {
		int idx;
		int cost;

		public Node(int idx, int cost) {
			this.idx = idx;
			this.cost = cost;
		}
	}

}









