import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

import java.io.BufferedReader;
import java.util.*;

public class Main {

	/*
	1
	2 3 3
	1 4 3
	6 5 2
	2 2 10
	1 3 5
	2 2 20
	 */

	static int N;
	static int M;
	static int Q;
	static int map[][];
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;

		int tc = Integer.parseInt(br.readLine());

		//n m q 입력 받끼
		for(int t=0; t < tc; t++) {
			st = new StringTokenizer(br.readLine());
			N = Integer.parseInt(st.nextToken());
			M = Integer.parseInt(st.nextToken());
			Q = Integer.parseInt(st.nextToken());

			map = new int[N][M];

			int row[] = new int[N];
			int col[] = new int[M];
			boolean rowVisit[] = new boolean[N];
			boolean colVisit[] = new boolean[M];
			int chainRow[] = new int[N];
			int chainCol[] = new int[M];
			int max = Integer.MIN_VALUE;

			//map 초기화
			for(int i=0; i<N; i++) {
				st = new StringTokenizer(br.readLine());
				for (int j = 0; j < M; j++) {
					map[i][j] = Integer.parseInt(st.nextToken());
					max = Math.max(max,map[i][j]);
				}
				row[i] = max;
				max = 0;
			}

			//row col 합치기 가능

			//최적화 가능
			for(int i=0; i<M ;i++) {
				for(int j=0; j<N; j++) {
					max = Math.max(max,map[j][i]);
				}
				col[i] = max;
				max = 0;
			}

			int answer = 0;
			int now = 0;
			//최적화 가능
			for(int i=0; i<N; i++) {
				for(int j=0; j<M; j++) {
					if(row[i] == col[j]) {
						now++;
						rowVisit[i] = true;
						colVisit[j] = true;
						chainRow[i] = j;
						chainCol[j] = i;
					}
				}
			}

			//셀 변경
			for(int i=0; i<Q; i++) {
				st = new StringTokenizer(br.readLine());

				int r = Integer.parseInt(st.nextToken()) -1;
				int c = Integer.parseInt(st.nextToken()) -1;
				int x = Integer.parseInt(st.nextToken()) -1;

				map[r][c] = x;

				if(x > row[r] && x > col[c]) {

					row[r] = x;
					col[c] = x;
					

					if (rowVisit[r] && colVisit[c]) {
						colVisit[chainRow[r]] = false;
						rowVisit[chainCol[c]] = false;
						now = now -1;
					} else if (rowVisit[r]) {
						colVisit[chainRow[r]] = false;
					} else if(colVisit[c]) {
						rowVisit[chainCol[c]] = false;
					} else {
						now = now +1;
					}

					rowVisit[r] = true;
					colVisit[c] = true;
					chainRow[r] = c;
					chainCol[c] = r;
				}

				else if(x > row[r]) {
					row[r] = x;
					rowVisit[r] = false;
				} else if(x > col[c]) {
					col[c] = x;
					colVisit[c] = false;
				} else {

				}


				answer = answer + now;
			}

		}

		//map 설정



	}

}




