import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class Main {

	int V;
	int E;

	int K;

	//정점간 이동횟수 카운트
	int[] dist;

	List<List<Node>> graph = new ArrayList<>();

	public static void main(String[] args) throws IOException {
		new Main().solution();
	}

	public void solution() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringBuilder sb = new StringBuilder();

		StringTokenizer st = new StringTokenizer(br.readLine());
		V = Integer.parseInt(st.nextToken());
		E = Integer.parseInt(st.nextToken());

		K = Integer.parseInt(br.readLine());

		//정점의 갯수만큼 초기화
		for (int i = 0; i < V + 1; i++) {
			graph.add(new ArrayList<Node>());
		}

		//2차원 배열에 삽입
		for (int i = 0; i < E; i++) {
			st = new StringTokenizer(br.readLine());
			int u = Integer.parseInt(st.nextToken());
			int v = Integer.parseInt(st.nextToken());
			int w = Integer.parseInt(st.nextToken());

			graph.get(u).add(new Node(v, w));
		}

		//정점 초기화
		dist = new int[V + 1];

		//무한대로 초기화
		Arrays.fill(dist, Integer.MAX_VALUE);
		dijkstra(K);

		for (int i = 1; i < V+1; i++) {
			if(dist[i] == Integer.MAX_VALUE){
				System.out.println("INF");
			} else {
				System.out.println(dist[i]);
			}
		}
	}

	public void dijkstra(int start) {

		//최소 비용을 기준으로 다익스트라 알고리즘 구성
		PriorityQueue<Node> que = new PriorityQueue<Node>((s1, s2) -> {
			if (s1.cost > s2.cost) {
				return 1;
			} else {
				return -1;
			}
		});

		//시작노드를 큐에
		que.offer(new Node(start, 0));
		//방문처리
		dist[K] = 0;

		while (!que.isEmpty()) {
			Node node = que.poll();

			//기존 정점까지의 길이 와 새로운 정점 거리 비교
			//현재 노드에서 dist를 갱신할 수 없으면
			//굳이 확인을 안해도 되니까 continue
			if (node.cost > dist[node.idx]) {
				continue;
			}

			for (int i = 0; i < graph.get(node.idx).size(); i++) {
				Node nextNode = graph.get(node.idx).get(i);

				//갱신할 수 있으면
				if (dist[nextNode.idx] > node.cost + nextNode.cost) {
					//해당노드까지 가는 데 걸리는 비용
					dist[nextNode.idx] = node.cost + nextNode.cost;
					que.offer(new Node(nextNode.idx, dist[nextNode.idx]));
				}
			}
		}

	}

	class Node {
		int idx;
		int cost;

		public Node(int idx, int cost) {
			this.idx = idx;
			this.cost = cost;
		}
	}

}









