import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {

	int[][] map;
	int[][] dist;
	int n;

	int[] dirX = {1, -1, 0, 0};
	int[] dirY = {0, 0, 1, -1};

	public static void main(String[] args) throws IOException {
		new Main().solution();
	}

	public void solution() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		int k = 1;
		while (true) {
			n = Integer.parseInt(br.readLine());

			if (n == 0) {
				break;
			}

			map = new int[n][n];
			dist = new int[n][n];

			for (int i = 0; i < n; i++) {
				StringTokenizer st = new StringTokenizer(br.readLine());
				for (int j = 0; j < n; j++) {
					map[i][j] = Integer.parseInt(st.nextToken());
					dist[i][j] = Integer.MAX_VALUE;
				}
			}
			bfs(0, 0);

			System.out.println("Problem " + (k) + ": " + dist[n - 1][n - 1]);

			k++;
		}

	}

	public boolean rangeCheck(int r, int c) {
		return r >= 0 && r < n && c >= 0 && c < n;
	}

	public void bfs(int r, int c) {
		Queue<Node> que = new LinkedList<>();

		que.offer(new Node(r, c));
		dist[r][c] = map[r][c];

		while (!que.isEmpty()) {
			Node node = que.poll();

			for (int i = 0; i < 4; i++) {
				int nextR = node.r + dirX[i];
				int nextC = node.c + dirY[i];

				if (rangeCheck(nextR, nextC)) {
					int nowValue = dist[node.r][node.c] + map[nextR][nextC];

					if (dist[nextR][nextC] > nowValue) {
						dist[nextR][nextC] = nowValue;
						que.offer(new Node(nextR, nextC));

					}
				}

			}

		}

	}

	class Node {
		int r;
		int c;

		Node(int r, int c) {
			this.r = r;
			this.c = c;
		}
	}

}










