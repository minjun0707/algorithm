import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

import java.sql.Array;
import java.util.*;

class Main {

	static List<List<Node>> list = new ArrayList<>();
	static int dist[];

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());

		//지름길의 개수
		int N = Integer.parseInt(st.nextToken());

		//고속도로의 길이
		int D = Integer.parseInt(st.nextToken());
		dist = new int[D + 1];

		for (int i = 0; i <= D; i++) {
			list.add(new ArrayList<>());
		}

		for (int i = 0; i < D; i++) {
			list.get(i).add(new Node(i + 1, 1));
		}

		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			int start = Integer.parseInt(st.nextToken());
			int end = Integer.parseInt(st.nextToken());
			int cost = Integer.parseInt(st.nextToken());

			if(end > D) {
				continue;
			}

			list.get(start).add(new Node(end, cost));
		}

		Arrays.fill(dist,Integer.MAX_VALUE);

		dijkstra();

		System.out.println(dist[D]);

	}

	static void dijkstra() {
		dist[0] = 0;

		PriorityQueue<Node> que = new PriorityQueue<>((s1,s2)->{
			if(s1.cost > s2.cost) {
				return 1;
			} else if(s2.cost < s2. cost) {
				return -1;
			} else {
				return 0;
			}
		});

		que.offer(new Node(0,0));

		while(!que.isEmpty()) {
			Node now = que.poll();

			if(now.cost > dist[now.idx]) {
				continue;
			}

			for(int i=0; i<list.get(now.idx).size() ; i++) {
				Node next = list.get(now.idx).get(i);

				if(next.cost + now.cost < dist[next.idx]) {
					dist[next.idx] = next.cost + now.cost;
					que.offer(new Node(next.idx,dist[next.idx]));
				}
			}
		}

	}

	static class Node {
		int idx;
		int cost;

		Node(int idx, int cost) {
			this.idx = idx;
			this.cost = cost;
		}
	}

}




