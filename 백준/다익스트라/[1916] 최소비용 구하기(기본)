import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

import org.w3c.dom.Node;

public class Main {

	int N;
	int M;

	int dist[];

	int startCity;
	int endCity;

	List<List<Node>> graph = new ArrayList<>();

	public static void main(String[] args) throws IOException {
		new Main().solution();
	}

	public void solution() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringBuilder sb = new StringBuilder();

		N = Integer.parseInt(br.readLine());
		M = Integer.parseInt(br.readLine());

		for (int i = 0; i < N + 1; i++) {
			graph.add(new ArrayList<Node>());
		}

		dist = new int[N + 1];

		for (int i = 0; i < M; i++) {
			StringTokenizer st = new StringTokenizer(br.readLine());
			int start = Integer.parseInt(st.nextToken());
			int end = Integer.parseInt(st.nextToken());
			int cost = Integer.parseInt(st.nextToken());

			graph.get(start).add(new Node(end, cost));
		}

		StringTokenizer st = new StringTokenizer(br.readLine());
		startCity = Integer.parseInt(st.nextToken());
		endCity = Integer.parseInt(st.nextToken());

		Arrays.fill(dist,Integer.MAX_VALUE);

		dijkstra(startCity);

		System.out.println(dist[endCity]);



	}

	public void dijkstra(int start) {
		PriorityQueue<Node> que = new PriorityQueue<>( (a,b) ->{
			if(a.cost > b.cost) {
				return 1;
			} else {
				return -1;
			}
		});

		que.offer(new Node(start,0));
		dist[start] = 0;

		while(!que.isEmpty()) {
			Node node = que.poll();

			//최소거리가 확정된 노드는 점프한다
			if(node.cost > dist[node.idx]) {
				continue;
			}

			for (int i = 0; i < graph.get(node.idx).size(); i++) {
				Node nextNode = graph.get(node.idx).get(i);
				if(dist[nextNode.idx] > node.cost + nextNode.cost) {
					dist[nextNode.idx] = node.cost + nextNode.cost;
					que.offer(new Node(nextNode.idx, dist[nextNode.idx]));
				}


			}

		}



	}


	class Node {
		int idx;
		int cost;

		public Node(int idx, int cost) {
			this.idx = idx;
			this.cost = cost;
		}
	}

}









