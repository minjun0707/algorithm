import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

import java.sql.Array;
import java.util.*;

class Main {

	static int N;
	static int x;
	static int y;
	static int M;

	static int dist[];
	static List<List<Node>> list = new ArrayList<>();

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		N = Integer.parseInt(br.readLine());

		for(int i=0; i<=N; i++) {
			list.add(new ArrayList<Node>());
		}


		dist = new int[N+1];
		Arrays.fill(dist,Integer.MAX_VALUE);

		StringTokenizer st = new StringTokenizer(br.readLine());
		x = Integer.parseInt(st.nextToken());
		y = Integer.parseInt(st.nextToken());

		M = Integer.parseInt(br.readLine());

		for (int i = 0; i < M; i++) {
			st = new StringTokenizer(br.readLine());
			int start = Integer.parseInt(st.nextToken());
			int end = Integer.parseInt(st.nextToken());

			list.get(start).add(new Node(end,1));
			list.get(end).add(new Node(start,1));
		}

		dijkstra(x);

		if(dist[y] == Integer.MAX_VALUE) {
			System.out.println(-1);
		} else {
			System.out.println(dist[y]);
		}


	


	}

	static void dijkstra(int start) {
		Queue<Node> que = new LinkedList<Node>();

		que.offer(new Node(start, 0));
		dist[start] = 0;

		while(!que.isEmpty()) {
			Node node = que.poll();

			if(node.cost > dist[node.idx]) {
				continue;
			}

			for(int i=0; i < list.get(node.idx).size(); i++) {
				Node nextNode = list.get(node.idx).get(i);
				if(node.cost + nextNode.cost < dist[nextNode.idx]) {
					dist[nextNode.idx] = node.cost + nextNode.cost;
					que.offer(new Node(nextNode.idx,dist[nextNode.idx]));
				}

			}

		}

	}

	static class Node {
		int idx;
		int cost;

		Node(int idx, int cost) {
			this.idx = idx;
			this.cost = cost;
		}
	}


}





