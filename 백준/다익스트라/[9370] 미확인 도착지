import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Set;
import java.util.StringTokenizer;

import org.w3c.dom.Node;

public class Main {

	int testCase;
	int n;
	int m;
	int t;

	List<Integer> list;

	int dist[];

	int INF = 50000 * 1000;

	List<List<Node>> graph;

	public static void main(String[] args) throws IOException {
		new Main().solution();
	}

	public void solution() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringBuilder sb = new StringBuilder();
		StringTokenizer st;
		testCase = Integer.parseInt(br.readLine());

		for (int i = 0; i < testCase; i++) {

			//초기화
			graph = new ArrayList<>();

			//첫 번째 줄
			st = new StringTokenizer(br.readLine());

			//정점
			n = Integer.parseInt(st.nextToken());
			//간선
			m = Integer.parseInt(st.nextToken());
			//목적지 후보 개수
			t = Integer.parseInt(st.nextToken());

			//초기화
			for (int j = 0; j < n + 1; j++) {
				graph.add(new ArrayList<>());
			}

			//두 번째 줄
			st = new StringTokenizer(br.readLine());

			//출발지
			int s = Integer.parseInt(st.nextToken());
			//지나가야하는 정점
			int g = Integer.parseInt(st.nextToken());
			int h = Integer.parseInt(st.nextToken());

			for (int j = 0; j < m; j++) {
				st = new StringTokenizer(br.readLine());
				//출발지
				int a = Integer.parseInt(st.nextToken());
				//도착지
				int b = Integer.parseInt(st.nextToken());
				//코스트
				int d = Integer.parseInt(st.nextToken());

				graph.get(a).add(new Node(b, d));
				graph.get(b).add(new Node(a, d));

			}

			List<Integer> list = new ArrayList<>();
			for (int j = 0; j < t; j++) {
				//후보 정점
				int num = Integer.parseInt(br.readLine());
				list.add(num);
			}

			Set<Integer> answerSet = new HashSet<>();

			for (int j = 0; j < list.size(); j++) {
				if (dijkstra(s, list.get(j)) == dijkstra(s, g) + dijkstra(g, h) + dijkstra(h, list.get(j))) {
					answerSet.add(list.get(j));
				}

				if (dijkstra(s, list.get(j)) == dijkstra(s, h) + dijkstra(h, g) + dijkstra(g, list.get(j))) {
					answerSet.add(list.get(j));
				}

			}

			List<Integer> answerList = new ArrayList<>(answerSet);
			Collections.sort(answerList);

			sb = new StringBuilder();
			for (int j = 0; j < answerList.size(); j++) {
				sb.append(answerList.get(j) + " ");
			}

			System.out.println(sb.toString().trim());


		}

	}

	public int dijkstra(int start, int end) {
		dist = new int[n + 1];
		Arrays.fill(dist, INF);

		dist[start] = 0;

		PriorityQueue<Node> que = new PriorityQueue<>((a, b) -> {
			if (a.cost > b.cost) {
				return 1;
			} else {
				return -1;
			}
		});

		que.offer(new Node(start, 0));

		while (!que.isEmpty()) {
			Node node = que.poll();

			if (dist[node.idx] < node.cost) {
				continue;
			}

			for (int i = 0; i < graph.get(node.idx).size(); i++) {
				Node next = graph.get(node.idx).get(i);

				if (dist[next.idx] > node.cost + next.cost) {
					dist[next.idx] = node.cost + next.cost;
					que.offer(new Node(next.idx, dist[next.idx]));
				}

			}
		}

		return dist[end];

	}

	//Node 정의는 이전노드에서 idx노드로 갈때의 코스트값
	class Node {
		int idx;
		int cost;

		public Node(int idx, int cost) {
			this.idx = idx;
			this.cost = cost;
		}
	}

}

/*
* 6 9 2
2 3 1
1 2 1
1 3 3
2 4 4
2 5 5
3 4 3
3 6 2
4 5 4
4 6 3
5 6 7
5
6
*
*  */












