import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Scanner;
import java.util.Set;
import java.util.StringTokenizer;

public class Main {

	int N;
	int M;
	int[][] map;

	boolean visit[][];

	int[] dirX = {1, 0, -1, 0};
	int[] dirY = {0, 1, 0, -1};

	int answer = Integer.MIN_VALUE;

	public static void main(String[] args) throws IOException {
		new Main().solution();
	}

	public void solution() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());

		map = new int[N][M];

		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 0; j < M; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
			}
		}

		visit = new boolean[N][M];
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				dfs(i, j, 1, 0, -1);
			}
		}

		// for (int i = 0; i < N; i++) {
		// 	System.out.println();
		// 	for (int j = 0; j < M; j++) {
		// 		System.out.print(visit[i][j] + " ");
		// 	}
		// }

		System.out.println(answer);

	}

	public void dfs(int y, int x, int depth, int sum, int dir) {

		visit[y][x] = true;
		sum = sum + map[y][x];
		//탈출
		if (depth == 4) {
			answer = Math.max(sum, answer);
			visit[y][x] = false;
			return;
		}

		if (depth == 3) {
			int backDir = (dir + 2) % 4;
			int beforeX = x + dirX[backDir];
			int beforeY = y + dirY[backDir];

			for (int i = 0; i < 4; i++) {
				int nextX = beforeX + dirX[i];
				int nextY = beforeY + dirY[i];

				if (rangeCheck(nextX, nextY) && visit[nextY][nextX] == false) {
					answer = Math.max(sum + map[nextY][nextX], answer);
				}
			}
		}

		//4방향 탐색
		for (int i = 0; i < 4; i++) {
			int nextX = x + dirX[i];
			int nextY = y + dirY[i];

			//범위 체크
			if (rangeCheck(nextX, nextY) && visit[nextY][nextX] == false) {
				dfs(nextY, nextX, depth + 1, sum, i);
			}
		}

		visit[y][x] = false;
	}

	public boolean rangeCheck(int x, int y) {
		return (y >= 0 && y < N && x >= 0 && x < M);
	}

}





