import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {

	int map[][] = new int[9][9];
	int zeroCount = 0;

	boolean exitFlag = false;

	public static void main(String[] args) throws IOException {
		new Main().solution();
	}

	public void solution() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		for (int i = 0; i < 9; i++) {
			String str = br.readLine();
			String[] arr = str.split("");
			for (int j = 0; j < 9; j++) {
				map[i][j] = Integer.parseInt(arr[j]);
				if (Integer.parseInt(arr[j]) == 0) {
					zeroCount++;
				}
			}
		}


		dfs(0, 0);

	}

	public void dfs(int r, int c) {
		int arr[];
		arr = findZero(r, c);
		int nowR = arr[0];
		int nowC = arr[1];

		if(exitFlag) {
			return;
		}

		//더이상 0을 발견할 수 없으면 꽉찬상태
		if (nowR == -1 && nowC == -1) {
			exitFlag = true;
			for(int i =0; i< 9; i++) {
				if(i != 0) {
					System.out.println();

				}
				for(int j=0; j<9 ;j++) {
					System.out.print(map[i][j]);
				}
			}
			return;
		}

		//1~9까지 어떤 수를 넣을지
		for (int i = 1; i <= 9; i++) {
			//검증하기
			int input = validate(nowR, nowC, i);

			//넣을 수 없다면
			if (input == -1) {
				continue;
			}
			//검증해서 넣을수 있다면 넣기
			map[nowR][nowC] = input;

			// for(int j=0; j<9; j++) {
			// 	System.out.println();
			// 	for(int k =0; k<9; k++) {
			// 		System.out.print(map[j][k]);
			// 	}
			// }


			dfs(nowR, nowC);
			map[nowR][nowC] = 0;

		}


	}

	public int[] findZero(int r, int c) {
		int arr[] = new int[2];
		arr[0] = -1;
		arr[1] = -1;

		for (int i = r; i < 9; i++) {
			c = 0;
			for (int j = c; j < 9; j++) {
				if (map[i][j] == 0) {
					arr[0] = i;
					arr[1] = j;
					return arr;
				}
			}
		}

		return arr;
	}

	public int validate(int r, int c, int input) {
		//i는 넣을려는 값
		//가로 검증
		for (int j = 0; j < 9; j++) {
			//만약 겹치는 값이 존재하면
			if (map[r][j] == input) {
				return -1;
			}
		}

		//세로 검증
		for (int j = 0; j < 9; j++) {
			//만약 겹치는 값이 존재하면
			if (map[j][c] == input) {
				return -1;
			}
		}

		//012
		//345
		//678
		r = r / 3;
		c = c / 3;

		for (int j = r * 3; j < r * 3 + 3; j++) {
			for (int k = c * 3; k < c * 3 + 3; k++) {
				if(map[j][k] == input) {
					return -1;
				}
			}
		}

		return input;

	}

}










