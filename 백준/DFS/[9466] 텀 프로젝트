
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Set;
import java.util.StringTokenizer;

import org.w3c.dom.Node;

public class Main {

	int T;
	int n;

	int[] people;
	boolean visit[];
	boolean done[];
	int count;

	int start = 0;

	boolean success;

	public static void main(String[] args) throws IOException {
		new Main().solution();
	}

	public void solution() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringBuilder sb = new StringBuilder();

		T = Integer.parseInt(br.readLine());

		for (int i = 0; i < T; i++) {
			n = Integer.parseInt(br.readLine());

			StringTokenizer st = new StringTokenizer(br.readLine());

			people = new int[n + 1];
			visit = new boolean[n + 1];
			done = new boolean[n + 1];
			count = 0;

			for (int j = 1; j <= n; j++) {
				int num = Integer.parseInt(st.nextToken());
				people[j] = num;

				if (j == num) {
					done[j] = true;
					count++;
				}

			}

			for (int j = 1; j <= n; j++) {
				dfs(j);
			}

			System.out.println(n - count);

		}

	}

	public void dfs(int num) {
		if(done[num]) {
			return;
		}
		if(visit[num]) {
			done[num]= true;
			count++;
		}

		visit[num] = true;
		dfs(people[num]);
		done[num] = true;
		visit[num] = false;



	}

}