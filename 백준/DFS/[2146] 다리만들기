import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {

	int N;
	int[][] map;
	Queue<Node> que = new LinkedList<>();
	boolean dfsVisit[][];
	int bfsVisit[][];

	int[] dirX = {1, -1, 0, 0};
	int[] dirY = {0, 0, 1, -1};
	int sector = 1;
	int startSector = 0;
	int answer = Integer.MAX_VALUE;

	public static void main(String[] args) throws IOException {
		new Main().solution();
	}

	public void solution() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		N = Integer.parseInt(br.readLine());
		map = new int[N][N];
		dfsVisit = new boolean[N][N];

		for (int i = 0; i < N; i++) {
			StringTokenizer st = new StringTokenizer(br.readLine());
			for (int j = 0; j < N; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
			}
		}

		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				if (map[i][j] == 1 && dfsVisit[i][j] == false) {
					divideSector(i, j);
					sector++;
				}
			}
		}

		

		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				if(map[i][j] != 0) {
					startSector = map[i][j];
					findMinDist(i,j);
				}
			}
		}

		System.out.println(answer);

	}


	public void divideSector(int y, int x) {
		//탈출구문


		dfsVisit[y][x] = true;
		map[y][x] = sector;

		//반복구문
		for(int i = 0 ;i<4;i++){
			int nextX = x + dirX[i];
			int nextY = y + dirY[i];

			//1이면
			if(rangeCheck(nextX,nextY) ) {
				if(map[nextY][nextX] == 1 && dfsVisit[nextY][nextX] == false) {
					dfsVisit[nextY][nextX] = true;
					map[nextY][nextX] = sector;
					divideSector(nextY, nextX);
				}
			}

		}
	}

	public void findMinDist(int y, int x) {

		bfsVisit = new int[N][N];
		que.offer(new Node(x,y));

		while(!que.isEmpty()) {

			Node node = que.poll();

			for(int i=0; i <4; i++) {
				int nextX = node.x + dirX[i];
				int nextY = node.y + dirY[i];

				//array 범위 체크
				if(rangeCheck(nextX,nextY) == true) {

					//최단거리에 두 다리를 연결할 수 있다
					if(map[nextY][nextX] != 0 && map[nextY][nextX] != startSector) {
						int distance = bfsVisit[node.y][node.x];
						answer = Math.min(distance,answer);

						que.clear();
						return;
					}

					//만약 탐색이 가능하면 길찾기 진행
					//움직일려고 하는 노드의 값이 0이고 방문을 하지 않았을때만
					if(map[nextY][nextX] == 0 && bfsVisit[nextY][nextX] == 0) {

						bfsVisit[nextY][nextX] = bfsVisit[node.y][node.x] + 1;
						que.offer(new Node(nextX,nextY));
					}


				}


			}
		}


	}

	public boolean rangeCheck(int x, int y) {
		return (x >= 0 && x < N && y >= 0 && y < N);
	}

	class Node {
		int x;
		int y;

		public Node(int x, int y) {
			this.x = x;
			this.y = y;
		}
	}

}
