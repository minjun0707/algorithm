import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

import java.sql.Array;
import java.util.*;

class Main {

	static int distR[] = {0};
	static int distC[] = {1};
	static int map[][];
	static boolean visit[][];
	static int WALL = 1;
	static int ROW = 0;
	static int DIAGONAL = 1;
	static int COL = 2;
	static int N;
	static int count = 0;

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		N = Integer.parseInt(br.readLine());
		map = new int[N][N];
		visit = new boolean[N][N];

		for (int i = 0; i < N; i++) {
			StringTokenizer st = new StringTokenizer(br.readLine());
			for (int j = 0; j < N; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
				if (map[i][j] == WALL) {
					visit[i][j] = true;
				}
			}
		}

		//N-1 N-1;

		visit[0][0] = true;
		visit[0][1] = true;

		dfs(0, 1, ROW);
		System.out.println(count);

	}

	static void dfs(int r, int c, int direction) {
		if (r == N - 1 && c == N - 1) {
			count++;
			return;
		}

		//가로
		if (direction == ROW) {
			if (r >= 0 && r < N && c + 1 >= 0 && c + 1 < N) {
				if (visit[r][c + 1] == false) {
					visit[r][c + 1] = true;
					dfs(r, c + 1, ROW);
					visit[r][c + 1] = false;
				}
			}

			if (r + 1 >= 0 && r + 1 < N && c + 1 >= 0 && c + 1 < N) {
				if (visit[r + 1][c] == false && visit[r][c + 1] == false && visit[r + 1][c + 1] == false) {

					visit[r + 1][c + 1] = true;
					visit[r + 1][c] = true;
					visit[r][c + 1] = true;
					dfs(r + 1, c + 1, DIAGONAL);
					visit[r + 1][c + 1] = false;
					visit[r + 1][c] = false;
					visit[r][c + 1] = false;
				}
			}
		}

		if (direction == COL) {
			if (r + 1 >= 0 && r + 1 < N && c >= 0 && c < N) {
				if (visit[r + 1][c] == false) {
					visit[r + 1][c] = true;
					dfs(r + 1, c, COL);
					visit[r + 1][c] = false;
				}
			}

			if (r + 1 >= 0 && r + 1 < N && c + 1 >= 0 && c + 1 < N) {
				if (visit[r + 1][c] == false && visit[r][c + 1] == false && visit[r + 1][c + 1] == false) {
					visit[r + 1][c + 1] = true;
					visit[r + 1][c] = true;
					visit[r][c + 1] = true;
					dfs(r + 1, c + 1, DIAGONAL);
					visit[r + 1][c + 1] = false;
					visit[r + 1][c] = false;
					visit[r][c + 1] = false;
				}
			}
		}

		if (direction == DIAGONAL) {
			if (r >= 0 && r < N && c + 1 >= 0 && c + 1 < N) {
				if (visit[r][c + 1] == false) {
					visit[r][c + 1] = true;
					dfs(r, c + 1, ROW);
					visit[r][c + 1] = false;
				}
			}

			if (r + 1 >= 0 && r + 1 < N && c >= 0 && c < N) {
				if (visit[r + 1][c] == false) {
					visit[r + 1][c] = true;
					dfs(r + 1, c, COL);
					visit[r + 1][c] = false;
				}
			}

			if (r + 1 >= 0 && r + 1 < N && c + 1 >= 0 && c + 1 < N) {
				if (visit[r + 1][c] == false && visit[r][c + 1] == false && visit[r + 1][c + 1] == false) {
					visit[r + 1][c + 1] = true;
					visit[r + 1][c] = true;
					visit[r][c + 1] = true;
					dfs(r + 1, c + 1, DIAGONAL);
					visit[r + 1][c + 1] = false;
					visit[r + 1][c] = false;
					visit[r][c + 1] = false;
				}
			}
		}

	}

}




