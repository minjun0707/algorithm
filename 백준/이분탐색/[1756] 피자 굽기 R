
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main {

	int D;
	int N;

	int lastIndex;
	int endIdx;
	int arr[];
	boolean notFind = false;

	public static void main(String[] args) throws IOException {
		new Main().solution();
	}

	public void solution() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringBuilder sb = new StringBuilder();

		StringTokenizer st = new StringTokenizer(br.readLine());

		D = Integer.parseInt(st.nextToken());
		N = Integer.parseInt(st.nextToken());

		//오븐의 깊이
		arr = new int[D];

		//오븐 배열에 입력 받기

		st = new StringTokenizer(br.readLine());
		arr[0] = Integer.parseInt(st.nextToken());
		for (int i = 1; i < D; i++) {
			int num = Integer.parseInt(st.nextToken());

			if (num > arr[i - 1]) {
				arr[i] = arr[i - 1];
			} else {
				arr[i] = num;
			}
		}
		lastIndex = D;

		st = new StringTokenizer(br.readLine());
		for (int i = 0; i < N; i++) {
			int num = Integer.parseInt(st.nextToken());
			binarySearch(num);

		}

		if(notFind){
			System.out.println(0);
		} else{
			System.out.println(lastIndex+1);
		}

		// if(notFind){
		// 	System.out.println(0);
		// } else {
		// 	System.out.println(lastIndex);
		//
		// }

	}

	public void binarySearch(int num) {
		int left = 0;
		int right = lastIndex-1;
		int midIdx=0;
		int mid=0;

		int res = -1;

		while (left <= right) {

			midIdx = (left + right) / 2;
			mid = arr[midIdx];

			if (num > mid) {
				right = midIdx - 1;
			} else if (num < mid) {
				res = midIdx;
				left = midIdx + 1;
			} else {
				res = midIdx;
				left = midIdx + 1;
			}

		}

		if(res == -1) {
			notFind = true;
		}
		lastIndex = res;


	}

}









